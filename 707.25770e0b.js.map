{"version":3,"file":"707.25770e0b.js","mappings":"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A,8DACA,0CACA,kEACA,8CACA,0CACA,kCACA,0BACA,oCACA,gDACA,gDACA,4DACA,wCACA,sCACA,sFACA,sFACA,sGACA,8DACA,wCACA,8CACA,0CACA,wDACA,8CACA,gCACA,gCACA,wCACA,sCACA,sCACA,8CACA,8CACA,oCACA,4CACA,gDACA,gDACA,8CACA,4FACA,kFACA,0CACA,gCACA,gEACA,8CACA,8CACA,kDACA,gDACA,oDACA,8CACA,gCACA,kDACA,wDACA,wEACA,kDACA,kCACA,kCACA,4CACA,gCACA,gEACA,sDACA,8BACA,sCACA,8BACA,4CACA,8EACA,0DACA,0CACA,4EACA,wDACA,4BACA,sCACA,8DACA,sCACA,4DACA,sCACA,4EACA,8CACA,4CACA,4CACA,4CACA,0CACA,wBACA,wCACA,0CACA,sCACA,4CACA,gCACA,wCACA,4CACA,oDACA,8CACA,4EACA,sDACA,gDACA,4CACA,gDACA,gDACA,wDACA,8CACA,0CACA,0CACA,4CACA,wDACA,8CACA,0CACA,qDACA,wFACA,wEACA,gFACA,oFACA,gDACA,6DACA,6DACA,mFACA,mEACA,2EACA,+EACA,kDACA,0BACA,kCACA,sCAhIF,CAAYA,IAAAA,EAAY,KAmIxB,SAAYC,GACV,kCACA,qBACA,yCACA,yDACA,yDACA,yCACA,oBACA,mCACA,6CACA,6CACA,oCACA,iDAZF,CAAYA,IAAAA,EAAgB,KAwBrB,SAASC,EAA4BC,GAC1C,OAAIA,EAAS/K,KAAOqK,EAAgBW,MAC3B,iBACED,EAAS/K,KAAOqK,EAAgBY,SAClC,sBACEF,EAAS/K,KAAOqK,EAAgBa,UAClC,qBACEH,EAAS/K,KAAOqK,EAAgBc,MAClC,mBAEF,eAOF,SAASC,EACdC,EACAC,G,QAEMC,EAAsC,G,IAC5C,IAAuB,qBAAAF,GAAa,8BAAE,CAAjC,IAAMG,EAAQ,SACbA,MAAAA,OAAQ,EAARA,EAAUC,YAAaZ,EAAiBa,OAC1CH,EAAeI,KAAKH,I,iGAIxB,IAAMI,EAAmB,CACvBH,SAAUZ,EAAiBgB,eAC3BrJ,YAAa,i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","sources":["webpack://@debezium/ui/./src/app/components/KafkaConnectCluster.tsx","webpack://@debezium/ui/./src/app/components/connectorStepHelpers/FilterExcludeFieldComponent.tsx","webpack://@debezium/ui/./src/app/components/connectorStepHelpers/FilterInputFieldComponent.tsx","webpack://@debezium/ui/./src/app/components/connectorStepHelpers/NoPreviewFilterField.tsx","webpack://@debezium/ui/./src/app/components/formHelpers/FormDisabledComponent.tsx","webpack://@debezium/ui/./src/app/components/formHelpers/MaskHashSaltItem.tsx","webpack://@debezium/ui/./src/app/components/formHelpers/FormMaskHashSaltComponent.tsx","webpack://@debezium/ui/./src/app/components/formHelpers/MaskOrTruncateItem.tsx","webpack://@debezium/ui/./src/app/components/formHelpers/FormMaskOrTruncateComponent.tsx","webpack://@debezium/ui/./src/app/components/formHelpers/FormTextComponent.tsx","webpack://@debezium/ui/./src/app/components/formHelpers/FormComponent.tsx","webpack://@debezium/ui/./src/app/components/BasicSelectInput.tsx","webpack://@debezium/ui/./src/app/layout/AppLayoutContext.tsx","webpack://@debezium/ui/./src/app/layout/AppLayout.tsx","webpack://@debezium/ui/./assets/images/debezium_logo_300px.png","webpack://@debezium/ui/./src/app/layout/AppHeader.tsx","webpack://@debezium/ui/./src/app/shared/Utils.ts","webpack://@debezium/ui/./src/app/shared/ConfirmationDialog.tsx","webpack://@debezium/ui/./src/app/shared/RenderRoutes.tsx","webpack://@debezium/ui/./src/app/shared/routes.tsx","webpack://@debezium/ui/./src/app/shared/WithErrorBoundary.tsx","webpack://@debezium/ui/./src/app/app.tsx","webpack://@debezium/ui/./src/bootstrap.tsx"],"sourcesContent":["import { Services } from '@debezium/ui-services';\nimport { Form } from '@patternfly/react-core';\nimport { BasicSelectInput } from 'components';\nimport * as React from 'react';\nimport { fetch_retry } from 'shared';\n\nexport interface IKafkaConnectCluster {\n  handleChange: (clusterId: number) => void;\n}\n\nexport const KafkaConnectCluster: React.FC<IKafkaConnectCluster> = (props) => {\n  const [connectClusters, setConnectClusters] = React.useState<string[]>(['']);\n\n  const handleClusterChange = (value: string, event: any) => {\n    const index = connectClusters.indexOf(value) + 1;\n    props.handleChange(index);\n  };\n\n  React.useEffect(() => {\n    const globalsService = Services.getGlobalsService();\n    fetch_retry(globalsService.getConnectCluster, globalsService)\n      .then((cClusters: string[]) => {\n        setConnectClusters([...cClusters]);\n      })\n      .catch((err: React.SetStateAction<Error>) => {\n        alert(err);\n      });\n  }, [setConnectClusters]);\n\n  return (\n    <div className=\"kafka-connect pf-u-ml-lg\">\n      <div className=\"kafka-connect__cluster\">\n        <Form>\n          <BasicSelectInput\n            options={connectClusters}\n            fieldId=\"kafka-connect-cluster\"\n            propertyChange={handleClusterChange}\n          />\n        </Form>\n      </div>\n    </div>\n  );\n};\n","import './FilterExcludeFieldComponent.css';\nimport {\n  Flex,\n  FlexItem,\n  FormGroup,\n  Popover,\n  TextInput,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon, HelpIcon } from '@patternfly/react-icons';\nimport React from 'react';\n\nexport interface IFilterExcludeFieldComponentProps {\n  fieldName: string;\n  filterValues: Map<string, unknown>;\n  setFormData: (formData: Map<string, string>) => void;\n  formData: Map<string, string>;\n  invalidMsg: Map<string, string>;\n  fieldExcludeList: string;\n  fieldPlaceholder: string;\n  i18nFilterExcludeFieldLabel: string;\n  i18nFilterFieldInfoMsg: string;\n}\n\nconst getInvalidFilterMsg = (\n  filter: string,\n  errorMsg: Map<string, string> | undefined\n) => {\n  let returnVal = '';\n  errorMsg?.forEach((val, key) => {\n    if (key.includes(filter)) {\n      returnVal = val;\n    }\n  });\n  return returnVal;\n};\n\nconst getFieldExpression = (\n  data: Map<string, unknown>,\n  fieldExclude: string\n): string => {\n  return (data.get(fieldExclude) as string) || '';\n};\n\nexport const FilterExcludeFieldComponent: React.FunctionComponent<\n  IFilterExcludeFieldComponentProps\n> = (props) => {\n  const [filterField, setFilterField] = React.useState<string>(\n    getFieldExpression(props.filterValues, props.fieldExcludeList)\n  );\n\n  const handleParentFilter = (val: string) => {\n    setFilterField(val);\n  };\n\n  React.useEffect(() => {\n    setFilterField(\n      getFieldExpression(props.filterValues, props.fieldExcludeList)\n    );\n  }, [props.filterValues, props.fieldExcludeList]);\n\n  React.useEffect(() => {\n    const formDataCopy = new Map<string, string>(props.formData);\n    filterField\n      ? formDataCopy.set(props.fieldExcludeList, filterField)\n      : formDataCopy.delete(props.fieldExcludeList);\n    props.setFormData(formDataCopy);\n  }, [filterField]);\n\n  return (\n    <FormGroup\n      label={props.i18nFilterExcludeFieldLabel}\n      fieldId=\"field_filter\"\n      labelIcon={\n        <Popover\n          bodyContent={\n            <div>\n              {props.i18nFilterFieldInfoMsg}\n              <br />\n              <a\n                href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"\n                target=\"_blank\"\n              >\n                More Info\n              </a>\n            </div>\n          }\n        >\n          <button\n            aria-label=\"More info for filter field\"\n            onClick={(e) => e.preventDefault()}\n            aria-describedby=\"simple-form-filter\"\n            className=\"pf-c-form__group-label-help\"\n          >\n            <HelpIcon noVerticalAlign={true} />\n          </button>\n        </Popover>\n      }\n      helperTextInvalid={\n        props.invalidMsg?.size !== 0\n          ? getInvalidFilterMsg(props.fieldName, props.invalidMsg)\n          : ''\n      }\n      helperTextInvalidIcon={<ExclamationCircleIcon />}\n      validated={\n        props.invalidMsg?.size !== 0 &&\n        getInvalidFilterMsg(props.fieldName, props.invalidMsg)\n          ? 'error'\n          : 'default'\n      }\n    >\n      <Flex>\n        <FlexItem className={'filter_exclude_field_component-input'}>\n          <TextInput\n            value={filterField}\n            validated={\n              props.invalidMsg?.size !== 0 &&\n              getInvalidFilterMsg(props.fieldName, props.invalidMsg)\n                ? 'error'\n                : 'default'\n            }\n            type=\"text\"\n            id=\"field_filter\"\n            aria-describedby=\"field_filter-helper\"\n            name=\"field_filter\"\n            onChange={handleParentFilter}\n            placeholder={`e.g ${props.fieldPlaceholder}1, ${props.fieldPlaceholder}2`}\n          />\n        </FlexItem>\n        <FlexItem>\n          <></>\n        </FlexItem>\n      </Flex>\n    </FormGroup>\n  );\n};\n","import {\n  Flex,\n  FlexItem,\n  FormGroup,\n  Popover,\n  Text,\n  TextInput,\n  TextVariants,\n  ToggleGroup,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport {\n  ExclamationCircleIcon,\n  HelpIcon,\n  InfoCircleIcon,\n} from '@patternfly/react-icons';\nimport React from 'react';\n\nexport interface IFilterInputFieldComponentProps {\n  fieldName: string;\n  filterValues: Map<string, unknown>;\n  setFormData: (formData: Map<string, string>) => void;\n  formData: Map<string, string>;\n  invalidMsg: Map<string, string>;\n  fieldExcludeList: string;\n  fieldIncludeList: string;\n  fieldPlaceholder: string;\n  i18nFilterFieldLabel: string;\n  i18nFilterFieldHelperText: string;\n  i18nInclude: string;\n  i18nExclude: string;\n  i18nFilterFieldInfoMsg: string;\n}\n\nconst getInvalidFilterMsg = (\n  filter: string,\n  errorMsg: Map<string, string> | undefined\n) => {\n  let returnVal = '';\n  errorMsg?.forEach((val, key) => {\n    if (key.includes(filter)) {\n      returnVal = val;\n    }\n  });\n  return returnVal;\n};\n\nconst getFieldExpression = (\n  data: Map<string, unknown>,\n  fieldExclude: string,\n  fieldInclude: string\n): string => {\n  return (\n    (data.get(fieldExclude) as string) ||\n    (data.get(fieldInclude) as string) ||\n    ''\n  );\n};\n\nexport const FilterInputFieldComponent: React.FunctionComponent<\n  IFilterInputFieldComponentProps\n> = (props) => {\n  const FIELD_EXCLUDE = 'fieldExclude';\n  const FIELD_INCLUDE = 'fieldInclude';\n\n  const [filterField, setFilterField] = React.useState<string>(\n    getFieldExpression(\n      props.filterValues,\n      props.fieldExcludeList,\n      props.fieldIncludeList\n    )\n  );\n\n  const [fieldSelected, setFieldSelected] = React.useState<string>(\n    props.filterValues.has(props.fieldExcludeList)\n      ? FIELD_EXCLUDE\n      : FIELD_INCLUDE\n  );\n\n  const handleParentFilter = (val: string) => {\n    setFilterField(val);\n  };\n\n  const handleParentToggle = (isSelected: any, event: any) => {\n    const id = event.currentTarget.id;\n    setFieldSelected(id);\n  };\n\n  React.useEffect(() => {\n    setFilterField(\n      getFieldExpression(\n        props.filterValues,\n        props.fieldExcludeList,\n        props.fieldIncludeList\n      )\n    );\n    setFieldSelected(\n      props.filterValues.has(props.fieldExcludeList)\n        ? FIELD_EXCLUDE\n        : FIELD_INCLUDE\n    );\n  }, [props.filterValues, props.fieldExcludeList, props.fieldIncludeList]);\n\n  React.useEffect(() => {\n    const formDataCopy = new Map<string, string>(props.formData);\n    if (fieldSelected === FIELD_EXCLUDE) {\n      formDataCopy.delete(props.fieldIncludeList);\n      if (filterField) {\n        formDataCopy.set(props.fieldExcludeList, filterField);\n      } else {\n        formDataCopy.delete(props.fieldExcludeList);\n        setFieldSelected(FIELD_INCLUDE);\n      }\n    } else {\n      formDataCopy.delete(props.fieldExcludeList);\n      filterField\n        ? formDataCopy.set(props.fieldIncludeList, filterField)\n        : formDataCopy.delete(props.fieldIncludeList);\n    }\n    props.setFormData(formDataCopy);\n  }, [fieldSelected, filterField]);\n\n  return (\n    <FormGroup\n      label={props.i18nFilterFieldLabel}\n      fieldId=\"field_filter\"\n      helperText={\n        fieldSelected === FIELD_EXCLUDE ? (\n          <Text\n            component={TextVariants.h4}\n            className=\"child-selection-step_info\"\n          >\n            <InfoCircleIcon />\n            {props.i18nFilterFieldHelperText}\n          </Text>\n        ) : (\n          ''\n        )\n      }\n      labelIcon={\n        <Popover\n          bodyContent={\n            <div>\n              {props.i18nFilterFieldInfoMsg}\n              <br />\n              <a\n                href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\"\n                target=\"_blank\"\n              >\n                More Info\n              </a>\n            </div>\n          }\n        >\n          <button\n            aria-label=\"More info for filter field\"\n            onClick={(e) => e.preventDefault()}\n            aria-describedby=\"simple-form-filter\"\n            className=\"pf-c-form__group-label-help\"\n          >\n            <HelpIcon noVerticalAlign={true} />\n          </button>\n        </Popover>\n      }\n      helperTextInvalid={\n        props.invalidMsg?.size !== 0\n          ? getInvalidFilterMsg(props.fieldName, props.invalidMsg)\n          : ''\n      }\n      helperTextInvalidIcon={<ExclamationCircleIcon />}\n      validated={\n        props.invalidMsg?.size !== 0 &&\n        getInvalidFilterMsg(props.fieldName, props.invalidMsg)\n          ? 'error'\n          : 'default'\n      }\n    >\n      <Flex>\n        <FlexItem>\n          <TextInput\n            value={filterField}\n            validated={\n              props.invalidMsg?.size !== 0 &&\n              getInvalidFilterMsg(props.fieldName, props.invalidMsg)\n                ? 'error'\n                : 'default'\n            }\n            type=\"text\"\n            id=\"field_filter\"\n            aria-describedby=\"field_filter-helper\"\n            name=\"field_filter\"\n            onChange={handleParentFilter}\n            placeholder={`e.g ${props.fieldPlaceholder}1, ${props.fieldPlaceholder}2`}\n          />\n        </FlexItem>\n        <FlexItem>\n          <ToggleGroup aria-label=\"Include Exclude field toggle group\">\n            <ToggleGroupItem\n              buttonId={FIELD_INCLUDE}\n              isSelected={!!filterField && fieldSelected === FIELD_INCLUDE}\n              onChange={handleParentToggle}\n              onClick={(e) => e.preventDefault()}\n              text={props.i18nInclude}\n              isDisabled={!filterField}\n            />\n            <ToggleGroupItem\n              buttonId={FIELD_EXCLUDE}\n              isSelected={!!filterField && fieldSelected === FIELD_EXCLUDE}\n              onChange={handleParentToggle}\n              onClick={(e) => e.preventDefault()}\n              text={props.i18nExclude}\n              isDisabled={!filterField}\n            />\n          </ToggleGroup>\n        </FlexItem>\n      </Flex>\n    </FormGroup>\n  );\n};\n","import './NoPreviewFilterField.css';\nimport { ExpandableSection } from '@patternfly/react-core';\nimport React from 'react';\n\nexport interface INoPreviewFilterFieldProps {\n  i18nShowFilter: string;\n  i18nHideFilter: string;\n}\n\nexport const NoPreviewFilterField: React.FunctionComponent<\n  INoPreviewFilterFieldProps\n> = (props) => {\n  const [isExpanded, setIsExpanded] = React.useState<boolean>(false);\n  const onToggle = (isExpandedVal: boolean) => {\n    setIsExpanded(isExpandedVal);\n  };\n  return (\n    <ExpandableSection\n      toggleText={isExpanded ? props.i18nHideFilter : props.i18nShowFilter}\n      onToggle={onToggle}\n      isExpanded={isExpanded}\n      className={'no-preview-filter-field_expandable'}\n    >\n      {props.children}\n    </ExpandableSection>\n  );\n};\n","import { FormGroup, TextInput } from '@patternfly/react-core';\nimport { HelpInfoIcon } from 'components';\nimport _ from 'lodash';\nimport React, { FC } from 'react';\n\nexport interface IFormDisabledComponentProps {\n  label: string;\n  description: string | '';\n  fieldId: string;\n  name: string;\n  isRequired: boolean;\n  initialValues: any;\n}\nexport const FormDisabledComponent: FC<IFormDisabledComponentProps> = (\n  props\n) => {\n  return (\n    <FormGroup\n      label={props.label}\n      isRequired={props.isRequired}\n      labelIcon={\n        <HelpInfoIcon label={props.label} description={props.description} />\n      }\n      fieldId={props.label}\n    >\n      <TextInput\n        name={props.label}\n        isDisabled\n        value={''}\n        aria-label={props.label}\n      />\n    </FormGroup>\n  );\n};\n","import './MaskHashSaltItem.css';\nimport {\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  Select,\n  SelectOption,\n  SelectVariant,\n  TextInput,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\n\nexport interface IMaskHashSaltItemProps {\n  rowId: number;\n  columnsValue: string;\n  hashValue: string;\n  saltValue: string;\n  canDelete: boolean;\n  i18nRemoveDefinitionTooltip: string;\n  maskHashSaltItemChanged: (rowId: number, maskHashSaltValue: string) => void;\n  deleteMaskHashSaltItem: (rowId: number) => void;\n}\n\nexport const MaskHashSaltItem: React.FunctionComponent<\n  IMaskHashSaltItemProps\n> = (props) => {\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n\n  const onToggle = (open: boolean) => {\n    setOpen(open);\n  };\n\n  const selectOptions = [\n    { value: 'Choose...', isPlaceholder: true },\n    { value: 'MD2' },\n    { value: 'MD5' },\n    { value: 'SHA-1' },\n    { value: 'SHA-256' },\n    { value: 'SHA-384' },\n    { value: 'SHA-512' },\n  ];\n\n  const handleColumnsChange = (val: any) => {\n    handleItemValueChange(val, props.hashValue, props.saltValue);\n  };\n\n  const handleHashChange = (event: any, selection: any, isPlaceholder: any) => {\n    const hashVal = isPlaceholder ? '' : selection;\n    setOpen(false);\n    handleItemValueChange(props.columnsValue, hashVal, props.saltValue);\n  };\n\n  const handleSaltChange = (val: any) => {\n    handleItemValueChange(props.columnsValue, props.hashValue, val);\n  };\n\n  const handleItemValueChange = (columns: any, hash: any, salt: any) => {\n    const newValue = columns + '&&' + hash + '||' + salt;\n    props.maskHashSaltItemChanged(props.rowId, newValue);\n  };\n\n  const handleRemoveItemClick = () => {\n    props.deleteMaskHashSaltItem(props.rowId);\n  };\n\n  const handleKeyPress = (keyEvent: KeyboardEvent) => {\n    // do not allow entry of '.' or '-'\n    if (keyEvent.key === '.' || keyEvent.key === '-') {\n      keyEvent.preventDefault();\n    }\n  };\n\n  return (\n    <Grid>\n      <GridItem span={5}>\n        <Flex className={'mask-hash-salt-item-column'}>\n          <FlexItem\n            className={\n              'mask-hash-salt-item-label mask-hash-salt-item-column-input'\n            }\n          >\n            <span>Columns:</span>{' '}\n            <TextInput\n              data-testid={`${props.rowId}columns`}\n              id={`${props.rowId}columns`}\n              type={'text'}\n              onChange={handleColumnsChange}\n              value={props.columnsValue}\n              onKeyPress={(event) => handleKeyPress(event as any)}\n            />\n          </FlexItem>\n        </Flex>\n      </GridItem>\n      <GridItem span={3}>\n        <Flex>\n          <FlexItem\n            spacer={{ default: 'spacerXs' }}\n            className=\"mask-hash-salt-item-label\"\n          >\n            <span>Hash:</span>{' '}\n            <Select\n              variant={SelectVariant.single}\n              aria-label=\"Select Input\"\n              onToggle={onToggle}\n              onSelect={handleHashChange}\n              selections={props.hashValue}\n              isOpen={isOpen}\n            >\n              {selectOptions.map((option, index) => (\n                <SelectOption\n                  key={index}\n                  value={option.value}\n                  isPlaceholder={option.isPlaceholder}\n                />\n              ))}\n            </Select>\n          </FlexItem>\n        </Flex>\n      </GridItem>\n      <GridItem span={3}>\n        <Flex className=\"pf-l-flex-nowrap\">\n          <FlexItem\n            spacer={{ default: 'spacerXs' }}\n            className=\"mask-hash-salt-item-label\"\n          >\n            <span>Salt:</span>{' '}\n            <TextInput\n              data-testid={`${props.rowId}salt`}\n              id={`${props.rowId}salt`}\n              type={'text'}\n              onChange={handleSaltChange}\n              value={props.saltValue}\n              onKeyPress={(event) => handleKeyPress(event as any)}\n            />\n          </FlexItem>\n        </Flex>\n      </GridItem>\n      {props.canDelete ? (\n        <GridItem span={1}>\n          <Flex className={'mask-hash-salt-item-remove-button'}>\n            <FlexItem>\n              <Tooltip\n                position=\"right\"\n                content={props.i18nRemoveDefinitionTooltip}\n              >\n                <MinusCircleIcon\n                  className={'mask-hash-salt-item-remove-button-icon'}\n                  onClick={handleRemoveItemClick}\n                />\n              </Tooltip>\n            </FlexItem>\n          </Flex>\n        </GridItem>\n      ) : null}\n    </Grid>\n  );\n};\n","import './FormMaskHashSaltComponent.css';\nimport { HelpInfoIcon } from './HelpInfoIcon';\nimport { MaskHashSaltItem } from './MaskHashSaltItem';\nimport {\n  Button,\n  FormGroup,\n  InputGroup,\n  Stack,\n  StackItem,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useField } from 'formik';\nimport * as React from 'react';\n\nexport interface IFormMaskHashSaltComponentProps {\n  label: string;\n  description: string;\n  name: string;\n  fieldId: string;\n  helperTextInvalid?: any;\n  isRequired: boolean;\n  validated: 'default' | 'success' | 'warning' | 'error';\n  i18nAddDefinitionText: string;\n  i18nAddDefinitionTooltip: string;\n  i18nRemoveDefinitionTooltip: string;\n  propertyChange: (name: string, selection: any) => void;\n  setFieldValue: (\n    field: string,\n    value: any,\n    shouldValidate?: boolean | undefined\n  ) => void;\n}\n\nexport const FormMaskHashSaltComponent: React.FunctionComponent<\n  IFormMaskHashSaltComponentProps\n> = (props) => {\n  const [field] = useField(props);\n\n  const getItemRows = () => {\n    return field.value?.split('#$');\n  };\n\n  const handleMaskHashSaltItemChanged = (\n    rowId: number,\n    maskHashSaltValue: string\n  ) => {\n    // Break into rows\n    const rows = [...getItemRows()];\n    // replace element with updated content\n    rows[rowId] = maskHashSaltValue;\n    // Join elements back together\n    const newValue = rows.join('#$');\n    // Set new value\n    props.setFieldValue(field.name, newValue, true);\n  };\n\n  const handleDeleteMaskHashSaltItem = (rowIndex: number) => {\n    // Break into rows\n    const rows = [...getItemRows()];\n    rows.splice(rowIndex, 1);\n    // Join elements back together\n    const newValue = rows.join('#$');\n    // Set new value\n    props.setFieldValue(field.name, newValue, true);\n  };\n\n  const onAddDefinition = () => {\n    const newValue = field.value + '#$';\n    props.setFieldValue(field.name, newValue, true);\n  };\n\n  /**\n   * Return column segment from the supplied string\n   * Format of string : columns&&hash||salt\n   *   columns - first segment, ended with '&&'\n   *   hash    - second segment, preceeded by '&&' and ended with '||'\n   *   salt    - third segment, preceeded by '||'\n   * @param val the 3 segment string\n   */\n  const getColsValue = (val: string) => {\n    if (val && val.includes('&&')) {\n      return val.split('&&')[0];\n    }\n    return '';\n  };\n\n  /**\n   * Return hash segment from the supplied string\n   * Format of string : columns&&hash||salt\n   *   columns - first segment, ended with '&&'\n   *   hash    - second segment, preceeded by '&&' and ended with '||'\n   *   salt    - third segment, preceeded by '||'\n   * @param val the 3 segment string\n   */\n  const getHashValue = (val: string) => {\n    let hashVal = '';\n    if (val && val.includes('&&')) {\n      const trailing = val.split('&&')[1];\n      if (trailing) {\n        hashVal = trailing.split('||')[0];\n      }\n    }\n    return hashVal;\n  };\n\n  /**\n   * Return salt segment from the supplied string\n   * Format of string : columns&&hash||salt\n   *   columns - first segment, ended with '&&'\n   *   hash    - second segment, preceeded by '&&' and ended with '||'\n   *   salt    - third segment, preceeded by '||'\n   * @param val the 3 segment string\n   */\n  const getSaltValue = (val: string) => {\n    let saltVal = '';\n    if (val && val.includes('||')) {\n      const trailing = val.split('||')[1];\n      saltVal = trailing ? trailing : '';\n    }\n    return saltVal;\n  };\n\n  const id = field.name;\n\n  return (\n    <FormGroup\n      label={props.label}\n      isRequired={props.isRequired}\n      labelIcon={\n        <HelpInfoIcon label={props.label} description={props.description} />\n      }\n      helperTextInvalid={props.helperTextInvalid}\n      helperTextInvalidIcon={<ExclamationCircleIcon />}\n      fieldId={id}\n      validated={props.validated}\n    >\n      <InputGroup>\n        <Stack hasGutter={true} className={'form-mask-hash-salt-component'}>\n          {getItemRows()?.map((row: string, idx: number) => (\n            <StackItem key={idx}>\n              <MaskHashSaltItem\n                rowId={idx}\n                columnsValue={getColsValue(row)}\n                hashValue={getHashValue(row)}\n                saltValue={getSaltValue(row)}\n                canDelete={getItemRows().length > 1}\n                i18nRemoveDefinitionTooltip={props.i18nRemoveDefinitionTooltip}\n                maskHashSaltItemChanged={handleMaskHashSaltItemChanged}\n                deleteMaskHashSaltItem={handleDeleteMaskHashSaltItem}\n              />\n            </StackItem>\n          ))}\n          <StackItem>\n            <Tooltip\n              position={'right'}\n              content={props.i18nAddDefinitionTooltip}\n            >\n              <Button variant=\"link\" onClick={onAddDefinition}>\n                {props.i18nAddDefinitionText}\n              </Button>\n            </Tooltip>\n          </StackItem>\n        </Stack>\n      </InputGroup>\n    </FormGroup>\n  );\n};\n","import './MaskOrTruncateItem.css';\nimport {\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  TextInput,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport * as React from 'react';\n\nexport interface IMaskOrTruncateItemProps {\n  rowId: number;\n  columnsValue: string;\n  nValue: string;\n  canDelete: boolean;\n  i18nRemoveDefinitionTooltip: string;\n  maskTruncateItemChanged: (rowId: number, maskTruncateValue: string) => void;\n  deleteMaskTruncateItem: (rowId: number) => void;\n}\n\nexport const MaskOrTruncateItem: React.FunctionComponent<\n  IMaskOrTruncateItemProps\n> = (props) => {\n  const handleColumnsChange = (val: any) => {\n    handleItemValueChange(val, props.nValue);\n  };\n\n  const handleNChange = (val: any) => {\n    handleItemValueChange(props.columnsValue, val);\n  };\n\n  const handleItemValueChange = (columns: any, n: any) => {\n    const newValue = columns + '&&' + n;\n    props.maskTruncateItemChanged(props.rowId, newValue);\n  };\n\n  const handleRemoveItemClick = () => {\n    props.deleteMaskTruncateItem(props.rowId);\n  };\n\n  const handleKeyPress = (keyEvent: KeyboardEvent) => {\n    // do not allow entry of '.' or '-'\n    if (keyEvent.key === '.' || keyEvent.key === '-') {\n      keyEvent.preventDefault();\n    }\n  };\n\n  return (\n    <Grid>\n      <GridItem span={8}>\n        <Flex className={'mask-or-truncate-item-column'}>\n          <FlexItem\n            className={\n              'mask-hash-salt-item-label mask-or-truncate-item-column-input'\n            }\n          >\n            <span>Columns:</span>{' '}\n            <TextInput\n              id={`${props.rowId}columns`}\n              type={'text'}\n              onChange={handleColumnsChange}\n              value={props.columnsValue}\n              onKeyPress={(event) => handleKeyPress(event as any)}\n            />\n          </FlexItem>\n        </Flex>\n      </GridItem>\n      <GridItem span={3}>\n        <Flex>\n          <FlexItem className={'mask-hash-salt-item-label'}>\n            <span>n:</span>{' '}\n            <TextInput\n              id={`${props.rowId}n`}\n              min={'1'}\n              type={'number'}\n              onChange={handleNChange}\n              value={props.nValue}\n              onKeyPress={(event) => handleKeyPress(event as any)}\n            />\n          </FlexItem>\n        </Flex>\n      </GridItem>\n      {props.canDelete ? (\n        <GridItem span={1}>\n          <Flex className={'mask-or-truncate-item-remove-button'}>\n            <FlexItem>\n              <Tooltip\n                position=\"right\"\n                content={props.i18nRemoveDefinitionTooltip}\n              >\n                <MinusCircleIcon\n                  className={'mask-or-truncate-item-remove-button-icon'}\n                  onClick={handleRemoveItemClick}\n                />\n              </Tooltip>\n            </FlexItem>\n          </Flex>\n        </GridItem>\n      ) : null}\n    </Grid>\n  );\n};\n","import './FormMaskOrTruncateComponent.css';\nimport { HelpInfoIcon } from './HelpInfoIcon';\nimport { MaskOrTruncateItem } from './MaskOrTruncateItem';\nimport {\n  Button,\n  FormGroup,\n  InputGroup,\n  Stack,\n  StackItem,\n  Tooltip,\n} from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useField } from 'formik';\nimport * as React from 'react';\n\nexport interface IFormMaskOrTruncateComponentProps {\n  label: string;\n  description: string;\n  name: string;\n  fieldId: string;\n  helperTextInvalid?: any;\n  isRequired: boolean;\n  validated: 'default' | 'success' | 'warning' | 'error';\n  i18nAddDefinitionText: string;\n  i18nAddDefinitionTooltip: string;\n  i18nRemoveDefinitionTooltip: string;\n  propertyChange: (name: string, selection: any) => void;\n  setFieldValue: (\n    field: string,\n    value: any,\n    shouldValidate?: boolean | undefined\n  ) => void;\n}\n\nexport const FormMaskOrTruncateComponent: React.FunctionComponent<\n  IFormMaskOrTruncateComponentProps\n> = (props) => {\n  const [field] = useField(props);\n\n  const getItemRows = () => {\n    return field.value?.split('@^');\n  };\n\n  const handleMaskTruncateItemChanged = (\n    rowId: number,\n    maskTruncateValue: string\n  ) => {\n    // Break into rows\n    const rows = [...getItemRows()];\n    // replace element with updated content\n    rows[rowId] = maskTruncateValue;\n    // Join elements back together\n    const newValue = rows.join('@^');\n    // Set new value\n    props.setFieldValue(field.name, newValue, true);\n    props.propertyChange(field.name, newValue);\n  };\n\n  const handleDeleteMaskTruncateItem = (rowIndex: number) => {\n    // Break into rows\n    const rows = [...getItemRows()];\n    rows.splice(rowIndex, 1);\n    // Join elements back together\n    const newValue = rows.join('@^');\n    // Set new value\n    props.setFieldValue(field.name, newValue, true);\n    props.propertyChange(field.name, newValue);\n  };\n\n  const onAddDefinition = () => {\n    const newValue = field.value + '@^';\n    props.setFieldValue(field.name, newValue, true);\n    props.propertyChange(field.name, newValue);\n  };\n\n  const getColumnsValue = (row: string) => {\n    if (row && row.includes('&&')) {\n      return row.split('&&')[0];\n    }\n    return '';\n  };\n\n  const getNValue = (row: string) => {\n    if (row && row.includes('&&')) {\n      return row.split('&&')[1];\n    }\n    return '';\n  };\n\n  const id = field.name;\n\n  return (\n    <FormGroup\n      label={props.label}\n      isRequired={props.isRequired}\n      labelIcon={\n        <HelpInfoIcon label={props.label} description={props.description} />\n      }\n      helperTextInvalid={props.helperTextInvalid}\n      helperTextInvalidIcon={<ExclamationCircleIcon />}\n      fieldId={id}\n      validated={props.validated}\n    >\n      <InputGroup>\n        <Stack hasGutter={true} className={'form-mask-or-truncate-component'}>\n          {getItemRows()?.map((row: string, idx: number) => (\n            <StackItem key={idx}>\n              <MaskOrTruncateItem\n                rowId={idx}\n                columnsValue={getColumnsValue(row)}\n                nValue={getNValue(row)}\n                canDelete={getItemRows().length > 1}\n                i18nRemoveDefinitionTooltip={props.i18nRemoveDefinitionTooltip}\n                maskTruncateItemChanged={handleMaskTruncateItemChanged}\n                deleteMaskTruncateItem={handleDeleteMaskTruncateItem}\n              />\n            </StackItem>\n          ))}\n          <StackItem>\n            <Tooltip\n              position={'right'}\n              content={props.i18nAddDefinitionTooltip}\n            >\n              <Button variant=\"link\" onClick={onAddDefinition}>\n                {props.i18nAddDefinitionText}\n              </Button>\n            </Tooltip>\n          </StackItem>\n        </Stack>\n      </InputGroup>\n    </FormGroup>\n  );\n};\n","import { FormGroup, Text, TextVariants } from '@patternfly/react-core';\nimport { HelpInfoIcon } from 'components';\nimport _ from 'lodash';\nimport React, { FC } from 'react';\n\nexport interface IFormTextComponentProps {\n  label: string;\n  description: string | '';\n  fieldId: string;\n  name: string;\n  isRequired: boolean;\n  initialValues: any;\n}\nexport const FormTextComponent: FC<IFormTextComponentProps> = (props) => {\n  return (\n    <FormGroup\n      label={props.label}\n      isRequired={props.isRequired}\n      labelIcon={\n        <HelpInfoIcon label={props.label} description={props.description} />\n      }\n      fieldId={props.label}\n    >\n      <Text component={TextVariants.p}>\n        {props.initialValues[props.name] || ''}\n      </Text>\n    </FormGroup>\n  );\n};\n","import { FormCheckboxComponent } from './FormCheckboxComponent';\nimport { FormDisabledComponent } from './FormDisabledComponent';\nimport { FormDurationComponent } from './FormDurationComponent';\nimport { FormInputComponent } from './FormInputComponent';\nimport { FormMaskHashSaltComponent } from './FormMaskHashSaltComponent';\nimport { FormMaskOrTruncateComponent } from './FormMaskOrTruncateComponent';\nimport { FormSelectComponent } from './FormSelectComponent';\nimport { FormSwitchComponent } from './FormSwitchComponent';\nimport { FormTextComponent } from './FormTextComponent';\nimport {\n  ConnectorProperty,\n  PropertyValidationResult,\n} from '@debezium/ui-models';\nimport * as React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nexport interface IFormComponentProps {\n  isViewMode?: boolean;\n  initialValues?: any;\n  propertyDefinition: ConnectorProperty;\n  helperTextInvalid?: any;\n  invalidMsg: PropertyValidationResult[];\n  validated?: 'default' | 'success' | 'warning' | 'error' | undefined;\n  propertyChange: (name: string, selection: any) => void;\n  clearValidationError?: () => void;\n  setFieldValue: (\n    field: string,\n    value: any,\n    shouldValidate?: boolean | undefined\n  ) => void;\n}\n\nconst getInvalidFilterMsg = (\n  filter: string,\n  errorMsg: PropertyValidationResult[]\n) => {\n  let returnVal = '';\n  errorMsg?.forEach((val) => {\n    if (val.property === filter.replace(/&/g, '.')) {\n      returnVal = val.message;\n    }\n  });\n  return returnVal;\n};\n\nconst clearValidation = () => null;\n\nexport const FormComponent: React.FunctionComponent<IFormComponentProps> = (\n  props\n) => {\n  const { t } = useTranslation();\n\n  const getValidate = () => {\n    return props.validated === 'default'\n      ? getInvalidFilterMsg(props.propertyDefinition.name, props.invalidMsg)\n        ? 'error'\n        : 'default'\n      : 'error';\n  };\n  if (props.isViewMode) {\n    return (\n      <FormTextComponent\n        description={props.propertyDefinition.description}\n        isRequired={props.propertyDefinition.isMandatory}\n        fieldId={props.propertyDefinition.name}\n        name={props.propertyDefinition.name}\n        label={props.propertyDefinition.displayName}\n        initialValues={props.initialValues}\n      />\n    );\n  } else {\n    // Has allowed values - Select component\n    if (props.propertyDefinition.allowedValues) {\n      return (\n        <FormSelectComponent\n          helperTextInvalid={props.helperTextInvalid}\n          fieldId={props.propertyDefinition.name}\n          name={props.propertyDefinition.name}\n          isRequired={props.propertyDefinition.isMandatory}\n          description={props.propertyDefinition.description}\n          label={props.propertyDefinition.displayName}\n          propertyChange={props.propertyChange}\n          setFieldValue={props.setFieldValue}\n          options={props.propertyDefinition.allowedValues}\n          validated={getValidate()}\n        />\n      );\n      // Boolean - checkbox\n    } else if (props.propertyDefinition.type === 'BOOLEAN') {\n      return (\n        <FormCheckboxComponent\n          isChecked={\n            typeof props.propertyDefinition.defaultValue !== 'undefined' &&\n            props.propertyDefinition.defaultValue === true\n          }\n          fieldId={props.propertyDefinition.name}\n          name={props.propertyDefinition.name}\n          label={props.propertyDefinition.displayName}\n          description={props.propertyDefinition.description}\n          propertyChange={props.propertyChange}\n          setFieldValue={props.setFieldValue}\n        />\n      );\n      // Boolean - switch\n    } else if (props.propertyDefinition.type === 'BOOLEAN-SWITCH') {\n      return (\n        <FormSwitchComponent\n          isChecked={\n            typeof props.propertyDefinition.defaultValue !== 'undefined' &&\n            props.propertyDefinition.defaultValue === true\n          }\n          fieldId={props.propertyDefinition.name}\n          name={props.propertyDefinition.name}\n          label={props.propertyDefinition.displayName}\n          description={props.propertyDefinition.description}\n          propertyChange={props.propertyChange}\n          setFieldValue={props.setFieldValue}\n        />\n      );\n      // Duration\n    } else if (props.propertyDefinition.type === 'DURATION') {\n      return (\n        <FormDurationComponent\n          description={props.propertyDefinition.description}\n          isRequired={props.propertyDefinition.isMandatory}\n          fieldId={props.propertyDefinition.name}\n          name={props.propertyDefinition.name}\n          helperTextInvalid={\n            getInvalidFilterMsg(\n              props.propertyDefinition.name,\n              props.invalidMsg\n            ) || props.helperTextInvalid\n          }\n          label={props.propertyDefinition.displayName}\n          propertyChange={props.propertyChange}\n          setFieldValue={props.setFieldValue}\n          validated={getValidate()}\n        />\n      );\n      // Column Mask or Column Truncate\n    } else if (props.propertyDefinition.type === 'COL_MASK_OR_TRUNCATE') {\n      return (\n        <FormMaskOrTruncateComponent\n          description={props.propertyDefinition.description}\n          isRequired={props.propertyDefinition.isMandatory}\n          fieldId={props.propertyDefinition.name}\n          name={props.propertyDefinition.name}\n          helperTextInvalid={\n            getInvalidFilterMsg(\n              props.propertyDefinition.name,\n              props.invalidMsg\n            ) || props.helperTextInvalid\n          }\n          label={props.propertyDefinition.displayName}\n          i18nAddDefinitionText={t('addDefinition')}\n          i18nAddDefinitionTooltip={t('addDefinitionTooltip')}\n          i18nRemoveDefinitionTooltip={t('removeDefinitionTooltip')}\n          propertyChange={props.propertyChange}\n          setFieldValue={props.setFieldValue}\n          validated={getValidate()}\n        />\n      );\n      // Column Mask Hash and Salt\n    } else if (props.propertyDefinition.type === 'COL_MASK_HASH_SALT') {\n      return (\n        <FormMaskHashSaltComponent\n          description={props.propertyDefinition.description}\n          isRequired={props.propertyDefinition.isMandatory}\n          fieldId={props.propertyDefinition.name}\n          name={props.propertyDefinition.name}\n          helperTextInvalid={\n            getInvalidFilterMsg(\n              props.propertyDefinition.name,\n              props.invalidMsg\n            ) || props.helperTextInvalid\n          }\n          label={props.propertyDefinition.displayName}\n          i18nAddDefinitionText={t('addDefinition')}\n          i18nAddDefinitionTooltip={t('addDefinitionTooltip')}\n          i18nRemoveDefinitionTooltip={t('removeDefinitionTooltip')}\n          propertyChange={props.propertyChange}\n          setFieldValue={props.setFieldValue}\n          validated={getValidate()}\n        />\n      );\n\n      // Any other - Text input\n    } else {\n      if (\n        // check if in Edit flow\n        props.isViewMode !== undefined &&\n        props.propertyDefinition.type === 'PASSWORD'\n      ) {\n        return (\n          <FormDisabledComponent\n            description={props.propertyDefinition.description}\n            isRequired={props.propertyDefinition.isMandatory}\n            fieldId={props.propertyDefinition.name}\n            name={props.propertyDefinition.name}\n            label={props.propertyDefinition.displayName}\n            initialValues={props.initialValues}\n          />\n        );\n      } else {\n        return (\n          <FormInputComponent\n            isRequired={props.propertyDefinition.isMandatory}\n            fieldId={props.propertyDefinition.name}\n            name={props.propertyDefinition.name}\n            label={props.propertyDefinition.displayName}\n            type={props.propertyDefinition.type}\n            helperTextInvalid={\n              getInvalidFilterMsg(\n                props.propertyDefinition.name,\n                props.invalidMsg\n              ) || props.helperTextInvalid\n            }\n            infoTitle={\n              props.propertyDefinition.displayName ||\n              props.propertyDefinition.name\n            }\n            infoText={props.propertyDefinition.description}\n            validated={getValidate()}\n            clearValidationError={props.clearValidationError || clearValidation}\n          />\n        );\n      }\n    }\n  }\n};\n","import './BasicSelectInput.css';\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from '@patternfly/react-core';\nimport * as React from 'react';\n\nexport interface IBasicSelectInputProps {\n  label?: string;\n  fieldId: string;\n  options: string[];\n  propertyChange: (name: string, selection?: any) => void;\n}\n\nexport const BasicSelectInput = (props: IBasicSelectInputProps) => {\n  const { label, fieldId, options, propertyChange } = props;\n\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const [selected, setSelected] = React.useState<boolean>(false);\n\n  const onToggle = (open: boolean) => {\n    setOpen(open);\n  };\n\n  const clearSelection = () => {\n    setSelected(false);\n    setOpen(false);\n  };\n\n  const onSelect = (e: any, selection: any, isPlaceholder: any) => {\n    if (isPlaceholder) {\n      clearSelection();\n    } else {\n      setSelected(selection);\n      setOpen(false);\n      propertyChange(selection);\n    }\n  };\n\n  return (\n    <FormGroup label={label} fieldId={fieldId} name={fieldId}>\n      <Select\n        className=\"basic-select-input\"\n        variant={SelectVariant.single}\n        aria-label=\"Select Input\"\n        onToggle={onToggle}\n        onSelect={onSelect}\n        selections={selected}\n        isOpen={isOpen}\n      >\n        {options.map((option: any, index) => (\n          <SelectOption\n            key={index}\n            value={option}\n            isPlaceholder={option.isPlaceholder}\n          />\n        ))}\n      </Select>\n    </FormGroup>\n  );\n};\n","import * as React from 'react';\n\nexport interface IAppLayoutContext {\n  showBreadcrumb: (breadcrumb: any) => void;\n  clusterId: number;\n}\n\nexport const AppLayoutContextDefaultValue = {} as IAppLayoutContext;\n\nexport const AppLayoutContext = React.createContext<IAppLayoutContext>(\n  AppLayoutContextDefaultValue\n);\n","import './layout.css';\nimport { Page, PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { AppHeader, AppLayoutContext } from 'layout';\nimport * as React from 'react';\n\nexport const AppLayout: React.FC = ({ children }) => {\n  const [breadcrumb, setHasBreadcrumb] = React.useState(null);\n  const [clusterId, setClusterId] = React.useState<number>(1);\n  const showBreadcrumb = (b: any) => setHasBreadcrumb(b);\n\n  const handleClusterIdChange = (id: number) => {\n    setClusterId(id);\n  };\n  return (\n    <AppLayoutContext.Provider value={{ showBreadcrumb, clusterId }}>\n      <Page\n        header={<AppHeader handleClusterChange={handleClusterIdChange} />}\n        breadcrumb={breadcrumb}\n        className=\"app-page\"\n      >\n        <PageSection variant={PageSectionVariants.light}>\n          {children}\n        </PageSection>\n      </Page>\n    </AppLayoutContext.Provider>\n  );\n};\n","export default __webpack_public_path__ + \"debezium_logo_300px.646aaf5b.png\";","import {\n  AboutModal,\n  Brand,\n  PageHeader,\n  PageHeaderTools,\n  TextContent,\n  TextList,\n  TextListItem,\n} from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport BrandLogo from 'assets/images/debezium_logo_300px.png';\nimport { KafkaConnectCluster } from 'components';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport interface IAppHeader {\n  handleClusterChange: (clusterId: number) => void;\n}\n\nexport const AppHeader: React.FC<IAppHeader> = (props) => {\n  const [isModalOpen, setIsModalOpen] = React.useState(false);\n  const handleModalToggle = () => setIsModalOpen(!isModalOpen);\n  const BuildModal = () => (\n    <AboutModal\n      isOpen={isModalOpen}\n      onClose={handleModalToggle}\n      brandImageSrc={BrandLogo}\n      brandImageAlt=\"Debezium\"\n      productName=\"Debezium UI\"\n    >\n      <TextContent>\n        {typeof process.env.COMMIT_HASH !== 'undefined' && (\n          <TextList component=\"dl\">\n            <TextListItem component=\"dt\">Build</TextListItem>\n            <TextListItem component=\"dd\">\n              <a\n                href={`https://github.com/debezium/debezium-ui/commit/${process.env.COMMIT_HASH}`}\n                target=\"_blank\"\n              >\n                {process.env.COMMIT_HASH}\n              </a>\n            </TextListItem>\n          </TextList>\n        )}\n      </TextContent>\n    </AboutModal>\n  );\n  const logoComponent = (\n    <>\n      <Link to=\"./\">\n        <Brand className=\"brandLogo\" src={BrandLogo} alt=\"Debezium\" />\n      </Link>\n      <KafkaConnectCluster handleChange={props.handleClusterChange} />\n    </>\n  );\n  const headerTools = (\n    <PageHeaderTools>\n      {typeof process.env.COMMIT_HASH !== 'undefined' && (\n        <>\n          <OutlinedQuestionCircleIcon onClick={handleModalToggle} />\n          <BuildModal />\n        </>\n      )}\n    </PageHeaderTools>\n  );\n\n  return (\n    <PageHeader\n      logo={logoComponent}\n      logoComponent={'div'}\n      headerTools={headerTools}\n    />\n  );\n};\n","import { ConnectorProperty, ConnectorType } from '@debezium/ui-models';\nimport _ from 'lodash';\n\nexport enum ConnectorState {\n  UNASSIGNED = 'UNASSIGNED',\n  RUNNING = 'RUNNING',\n  PAUSED = 'PAUSED',\n  FAILED = 'FAILED',\n  DESTROYED = 'DESTROYED',\n}\n\nexport enum ConnectorTypeId {\n  POSTGRES = 'postgres',\n  MYSQL = 'mysql',\n  SQLSERVER = 'sqlserver',\n  MONGO = 'mongodb',\n}\n\nexport enum DatabaseFilter {\n  NAME = 'database',\n  LABEL = 'databaseName',\n}\n\nexport enum SchemaFilter {\n  NAME = 'schema',\n  LABEL = 'schemaName',\n}\n\nexport enum TableFilter {\n  NAME = 'table',\n  LABEL = 'tableName',\n}\n\nexport enum CollectionFilter {\n  NAME = 'collection',\n  LABEL = 'collectionName',\n}\n\nexport enum ColumnFilter {\n  NAME = 'column',\n  LABEL = 'columnName',\n}\n\nexport enum FieldFilter {\n  NAME = 'field',\n  LABEL = 'fieldName',\n}\n\nexport enum PropertyName {\n  BIGINT_UNSIGNED_HANDLING_MODE = 'bigint.unsigned.handling.mode',\n  BINARY_HANDLING_MODE = 'binary.handling.mode',\n  BINLOG_BUFFER_SIZE = 'binlog.buffer.size',\n  COLLECTION_INCLUDE_LIST = 'collection.include.list',\n  COLLECTION_EXCLUDE_LIST = 'collection.exclude.list',\n  COLUMN_INCLUDE_LIST = 'column.include.list',\n  COLUMN_EXCLUDE_LIST = 'column.exclude.list',\n  COLUMN_MASK_HASH_SALT = 'column.mask.hash',\n  COLUMN_MASK = 'column.mask.with.(d+).chars',\n  COLUMN_TRUNCATE = 'column.truncate.to.(d+).chars',\n  CONNECT_BACKOFF_INITIAL_DELAY_MS = 'connect.backoff.initial.delay.ms',\n  CONNECT_BACKOFF_MAX_DELAY_MS = 'connect.backoff.max.delay.ms',\n  CONNECT_KEEP_ALIVE = 'connect.keep.alive',\n  CONNECT_KEEP_ALIVE_INTERVAL_MS = 'connect.keep.alive.interval.ms',\n  CONNECT_MAX_ATTEMPTS = 'connect.max.attempts',\n  CONNECT_TIMEOUT_MS = 'connect.timeout.ms',\n  CONNECTOR_NAME = 'connector.name',\n  CONVERTERS = 'converters',\n  DATABASE_DBNAME = 'database.dbname',\n  DATABASE_INCLUDE_LIST = 'database.include.list',\n  DATABASE_EXCLUDE_LIST = 'database.exclude.list',\n  DATABASE_INITIAL_STATEMENTS = 'database.initial.statements',\n  DATABASE_INSTANCE = 'database.instance',\n  DATABASE_HISTORY = 'database.history',\n  DATABASE_HISTORY_KAFKA_BOOTSTRAP_SERVERS = 'database.history.kafka.bootstrap.servers',\n  DATABASE_HISTORY_KAFKA_RECOVERY_ATTEMPTS = 'database.history.kafka.recovery.attempts',\n  DATABASE_HISTORY_KAFKA_RECOVERY_POLL_INTERVAL_MS = 'database.history.kafka.recovery.poll.interval.ms',\n  DATABASE_HISTORY_KAFKA_TOPIC = 'database.history.kafka.topic',\n  DATABASE_HOSTNAME = 'database.hostname',\n  DATABASE_JDBC_DRIVER = 'database.jdbc.driver',\n  DATABASE_SERVER_ID = 'database.server.id',\n  DATABASE_SERVER_ID_OFFSET = 'database.server.id.offset',\n  DATABASE_SERVER_NAME = 'database.server.name',\n  DATABASE_PORT = 'database.port',\n  DATABASE_USER = 'database.user',\n  DATABASE_PASSWORD = 'database.password',\n  DATABASE_SSLMODE = 'database.sslmode',\n  DATABASE_SSLCERT = 'database.sslcert',\n  DATABASE_SSLPASSWORD = 'database.sslpassword',\n  DATABASE_SSLROOTCERT = 'database.sslrootcert',\n  DATABASE_SSLKEY = 'database.sslkey',\n  DATABASE_SSLFACTORY = 'database.sslfactory',\n  DATABASE_TCPKEEPALIVE = 'database.tcpKeepAlive',\n  DECIMAL_HANDLING_MODE = 'decimal.handling.mode',\n  ENABLE_TIME_ADJUSTER = 'enable.time.adjuster',\n  EVENT_DESERIALIZATION_FAILURE_HANDLING_MODE = 'event.deserialization.failure.handling.mode',\n  EVENT_PROCESSING_FAILURE_HANDLING_MODE = 'event.processing.failure.handling.mode',\n  FIELD_EXCLUDE_LIST = 'field.exclude.list',\n  FIELD_RENAMES = 'field.renames',\n  GTID_SOURCE_FILTER_DML_EVENTS = 'gtid.source.filter.dml.events',\n  GTID_SOURCE_INCLUDES = 'gtid.source.includes',\n  GTID_SOURCE_EXCLUDES = 'gtid.source.excludes',\n  HEARTBEAT_ACTION_QUERY = 'heartbeat.action.query',\n  HEARTBEAT_INTERVAL_MS = 'heartbeat.interval.ms',\n  HEARTBEAT_TOPICS_PREFIX = 'heartbeat.topics.prefix',\n  HSTORE_HANDLING_MODE = 'hstore.handling.mode',\n  INCLUDE_QUERY = 'include.query',\n  INCLUDE_SCHEMA_CHANGES = 'include.schema.changes',\n  INCLUDE_UNKNOWN_DATATYPES = 'include.unknown.datatypes',\n  INCONSISTENT_SCHEMA_HANDLING_MODE = 'inconsistent.schema.handling.mode',\n  INTERVAL_HANDLING_MODE = 'interval.handling.mode',\n  MAX_BATCH_SIZE = 'max.batch.size',\n  MAX_QUEUE_SIZE = 'max.queue.size',\n  MESSAGE_KEY_COLUMNS = 'message.key.columns',\n  MONGODB_HOSTS = 'mongodb.hosts',\n  MONGODB_MEMBERS_AUTO_DISCOVER = 'mongodb.members.auto.discover',\n  MONGODB_POLL_INTERVAL_MS = 'mongodb.poll.interval.ms',\n  MONGODB_USER = 'mongodb.user',\n  MONGODB_PASSWORD = 'mongodb.password',\n  MONGODB_NAME = 'mongodb.name',\n  MONGODB_SSL_ENABLED = 'mongodb.ssl.enabled',\n  MONGODB_SSL_INVALID_HOSTNAME_ALLOWED = 'mongodb.ssl.invalid.hostname.allowed',\n  MONGODB_CONNECT_TIMEOUT_MS = 'mongodb.connect.timeout.ms',\n  MONGODB_AUTHSOURCE = 'mongodb.authsource',\n  MONGODB_SERVER_SELECTION_TIMEOUT_MS = 'mongodb.server.selection.timeout.ms',\n  MONGODB_SOCKET_TIMEOUT_MS = 'mongodb.socket.timeout.ms',\n  PLUGIN_NAME = 'plugin.name',\n  POLL_INTERVAL_MS = 'poll.interval.ms',\n  PROVIDE_TRANSACTION_METADATA = 'provide.transaction.metadata',\n  PUBLICATION_NAME = 'publication.name',\n  PUBLICATION_AUTOCREATE_MODE = 'publication.autocreate.mode',\n  QUERY_FETCH_SIZE = 'query.fetch.size',\n  RETRIABLE_RESTART_CONNECTOR_WAIT_MS = 'retriable.restart.connector.wait.ms',\n  SANITIZE_FIELD_NAMES = 'sanitize.field.names',\n  SCHEMA_INCLUDE_LIST = 'schema.include.list',\n  SCHEMA_EXCLUDE_LIST = 'schema.exclude.list',\n  SCHEMA_REFRESH_MODE = 'schema.refresh.mode',\n  SKIPPED_OPERATIONS = 'skipped.operations',\n  SLOT_NAME = 'slot.name',\n  SLOT_DROP_ON_STOP = 'slot.drop.on.stop',\n  SLOT_STREAM_PARAMS = 'slot.stream.params',\n  SLOT_MAX_RETRIES = 'slot.max.retries',\n  SLOT_RETRY_DELAY_MS = 'slot.retry.delay.ms',\n  SNAPSHOT_MODE = 'snapshot.mode',\n  SNAPSHOT_DELAY_MS = 'snapshot.delay.ms',\n  SNAPSHOT_FETCH_SIZE = 'snapshot.fetch.size',\n  SNAPSHOT_ISOLATION_MODE = 'snapshot.isolation.mode',\n  SNAPSHOT_MAX_THREADS = 'snapshot.max.threads',\n  SNAPSHOT_SELECT_STATEMENT_OVERRIDES = 'snapshot.select.statement.overrides',\n  SNAPSHOT_LOCK_TIMEOUT_MS = 'snapshot.lock.timeout.ms',\n  SNAPSHOT_LOCKING_MODE = 'snapshot.locking.mode',\n  SNAPSHOT_NEW_TABLES = 'snapshot.new.tables',\n  SNAPSHOT_CUSTOM_CLASS = 'snapshot.custom.class',\n  SOURCE_STRUCT_VERSION = 'source.struct.version',\n  STATUS_UPDATE_INTERVAL_MS = 'status.update.interval.ms',\n  TABLE_IGNORE_BUILTIN = 'table.ignore.builtin',\n  TABLE_INCLUDE_LIST = 'table.include.list',\n  TABLE_EXCLUDE_LIST = 'table.exclude.list',\n  TIME_PRECISION_MODE = 'time.precision.mode',\n  TOASTED_VALUE_PLACEHOLDER = 'toasted.value.placeholder',\n  TOMBSTONES_ON_DELETE = 'tombstones.on.delete',\n  TOPIC_CREATION_PREFIX = 'topic.creation.',\n  TOPIC_CREATION_GROUP_PREFIX = 'topic.creation.(.+).',\n  TOPIC_CREATION_DEFAULT_REPLICATION_FACTOR = 'topic.creation.default.replication.factor',\n  TOPIC_CREATION_DEFAULT_PARTITIONS = 'topic.creation.default.partitions',\n  TOPIC_CREATION_DEFAULT_CLEANUP_POLICY = 'topic.creation.default.cleanup.policy',\n  TOPIC_CREATION_DEFAULT_COMPRESSION_TYPE = 'topic.creation.default.compression.type',\n  TOPIC_CREATION_GROUPS = 'topic.creation.groups',\n  TOPIC_CREATION_GROUP_INCLUDE = 'topic.creation.(.+).include',\n  TOPIC_CREATION_GROUP_EXCLUDE = 'topic.creation.(.+).exclude',\n  TOPIC_CREATION_GROUP_REPLICATION_FACTOR = 'topic.creation.(.+).replication.factor',\n  TOPIC_CREATION_GROUP_PARTITIONS = 'topic.creation.(.+).partitions',\n  TOPIC_CREATION_GROUP_CLEANUP_POLICY = 'topic.creation.(.+).cleanup.policy',\n  TOPIC_CREATION_GROUP_COMPRESSION_TYPE = 'topic.creation.(.+).compression.type',\n  XMIN_FETCH_INTERVAL_MS = 'xmin.fetch.interval.ms',\n  DATA_SHAPE = 'data_shape',\n  DATA_SHAPE_KEY = 'data_shape.key',\n  DATA_SHAPE_VALUE = 'data_shape.value',\n}\n\nexport enum PropertyCategory {\n  CONNECTOR_NAME = 'CONNECTOR_NAME',\n  BASIC = 'CONNECTION',\n  ADVANCED_GENERAL = 'CONNECTION_ADVANCED',\n  ADVANCED_REPLICATION = 'CONNECTION_ADVANCED_REPLICATION',\n  ADVANCED_PUBLICATION = 'CONNECTION_ADVANCED_PUBLICATION',\n  ADVANCED_SSL = 'CONNECTION_ADVANCED_SSL',\n  FILTERS = 'FILTERS',\n  DATA_OPTIONS_GENERAL = 'CONNECTOR',\n  DATA_OPTIONS_SNAPSHOT = 'CONNECTOR_SNAPSHOT',\n  DATA_OPTIONS_ADVANCED = 'CONNECTOR_ADVANCED',\n  RUNTIME_OPTIONS_ENGINE = 'ADVANCED',\n  RUNTIME_OPTIONS_HEARTBEAT = 'ADVANCED_HEARTBEAT',\n}\n\n/**\n * Max retries for re-fetching the api call in case of error\n */\nconst MAX_RETRIES: number = 2;\n\n/**\n * Get a description of the ConnectorType, based on the id\n * @param connType the connector type\n */\nexport function getConnectorTypeDescription(connType: ConnectorType): string {\n  if (connType.id === ConnectorTypeId.MYSQL) {\n    return 'MySQL database';\n  } else if (connType.id === ConnectorTypeId.POSTGRES) {\n    return 'PostgreSQL database';\n  } else if (connType.id === ConnectorTypeId.SQLSERVER) {\n    return 'SQLServer database';\n  } else if (connType.id === ConnectorTypeId.MONGO) {\n    return 'MongoDB database';\n  }\n  return 'Unknown type';\n}\n\n/**\n * Get the basic properties\n * @param propertyDefns the array of all ConnectorProperty objects\n */\nexport function getBasicPropertyDefinitions(\n  propertyDefns: ConnectorProperty[],\n  isMCS?: boolean\n): ConnectorProperty[] {\n  const connProperties: ConnectorProperty[] = [];\n  for (const propDefn of propertyDefns) {\n    if (propDefn?.category === PropertyCategory.BASIC) {\n      connProperties.push(propDefn);\n    }\n  }\n  // Add a property for the Connector name\n  const connNameProperty = {\n    category: PropertyCategory.CONNECTOR_NAME,\n    description: 'A name for the connector which will be created',\n    displayName: 'Connector name',\n    name: PropertyName.CONNECTOR_NAME,\n    isMandatory: true,\n    type: 'STRING',\n    gridWidthLg: 4,\n    gridWidthSm: 12,\n  } as ConnectorProperty;\n  !isMCS && connProperties.push(connNameProperty);\n\n  return connProperties;\n}\n\nexport function formatPropertyDefinitions(\n  propertyValues: ConnectorProperty[]\n): ConnectorProperty[] {\n  return propertyValues.map((value: ConnectorProperty) => {\n    value.name = value.name.includes('data_shape')\n      ? value.name\n      : value.name.replace(/\\./g, '&');\n    return value;\n  });\n}\n\n/**\n * Get the advanced properties\n * @param propertyDefns the array of all ConnectorProperty objects\n */\nexport function getAdvancedPropertyDefinitions(\n  propertyDefns: ConnectorProperty[]\n): ConnectorProperty[] {\n  const connProperties: ConnectorProperty[] = [];\n  for (const propDefn of propertyDefns) {\n    if (\n      propDefn?.category === PropertyCategory.ADVANCED_GENERAL ||\n      propDefn?.category === PropertyCategory.ADVANCED_PUBLICATION ||\n      propDefn?.category === PropertyCategory.ADVANCED_REPLICATION ||\n      propDefn?.category === PropertyCategory.ADVANCED_SSL\n    ) {\n      connProperties.push(propDefn);\n    }\n  }\n  return connProperties;\n}\n\n/**\n * Get the filter properties\n * @param propertyDefns the array of all ConnectorProperty objects\n */\nexport function getFilterPropertyDefinitions(\n  propertyDefns: ConnectorProperty[]\n): ConnectorProperty[] {\n  const connProperties: ConnectorProperty[] = [];\n  for (const propDefn of propertyDefns) {\n    if (propDefn.category === PropertyCategory.FILTERS) {\n      connProperties.push(propDefn);\n    }\n  }\n  return connProperties;\n}\n\n/**\n * Get the data options properties\n * @param propertyDefns the array of all ConnectorProperty objects\n */\nexport function getDataOptionsPropertyDefinitions(\n  propertyDefns: ConnectorProperty[]\n): ConnectorProperty[] {\n  const connProperties: ConnectorProperty[] = [];\n  for (const propDefn of propertyDefns) {\n    if (\n      propDefn?.category === PropertyCategory.DATA_OPTIONS_GENERAL ||\n      propDefn?.category === PropertyCategory.DATA_OPTIONS_ADVANCED ||\n      propDefn?.category === PropertyCategory.DATA_OPTIONS_SNAPSHOT\n    ) {\n      connProperties.push(propDefn);\n    }\n  }\n  return connProperties;\n}\n\n/**\n * Get the runtime options properties\n * @param propertyDefns the array of all ConnectorProperty objects\n */\nexport function getRuntimeOptionsPropertyDefinitions(\n  propertyDefns: ConnectorProperty[]\n): ConnectorProperty[] {\n  const connProperties: ConnectorProperty[] = [];\n  for (const propDefn of propertyDefns) {\n    if (\n      propDefn?.category === PropertyCategory.RUNTIME_OPTIONS_ENGINE ||\n      propDefn?.category === PropertyCategory.RUNTIME_OPTIONS_HEARTBEAT\n    ) {\n      connProperties.push(propDefn);\n    }\n  }\n  return connProperties;\n}\n\n/**\n * Determine if the supplied category is one of the Data Options\n * @param propertyCategory the category\n */\nexport function isDataOptions(propertyCategory: PropertyCategory): boolean {\n  return (\n    propertyCategory === PropertyCategory.DATA_OPTIONS_GENERAL ||\n    propertyCategory === PropertyCategory.DATA_OPTIONS_ADVANCED ||\n    propertyCategory === PropertyCategory.DATA_OPTIONS_SNAPSHOT\n  );\n}\n\n/**\n * Determine if the supplied category is one of the Runtime Options\n * @param propertyCategory the category\n */\nexport function isRuntimeOptions(propertyCategory: PropertyCategory): boolean {\n  return (\n    propertyCategory === PropertyCategory.RUNTIME_OPTIONS_ENGINE ||\n    propertyCategory === PropertyCategory.RUNTIME_OPTIONS_HEARTBEAT\n  );\n}\n\n/**\n * Minimize property values.  This function eliminates property values from the supplied map\n * which are not required to be supplied to the backend for validation or connector creation.\n *   - include property values which are mandatory\n *   - include property values which have a default, and the value is different than the default\n *   - include property value if it is not empty - (if not mandatory and has no default)\n * @param propertyValues the map of property values\n * @param propertyDefns the array of property definitions\n */\nexport function minimizePropertyValues(\n  propertyValues: Map<string, string>,\n  propertyDefns: ConnectorProperty[]\n): Map<string, string> {\n  const minimizedValues: Map<string, string> = new Map<string, string>();\n\n  // console.log(\"MinimizePropertyValues: \" + JSON.stringify(mapToObject(propertyValues)));\n  propertyValues.forEach((value: string, key: string) => {\n    // Get the corresponding property definition\n    const propDefn = propertyDefns.find(\n      (prop) => prop?.name.replace(/&/g, '.') === key\n    );\n    if (propDefn) {\n      // Include mandatory values\n      if (propDefn.isMandatory) {\n        minimizedValues.set(key, value);\n        // Include non-mandatory if has default and value is different\n      } else if (propDefn.defaultValue != null) {\n        if (propDefn.defaultValue !== value) {\n          minimizedValues.set(key, value);\n        }\n      } else if (propDefn.name.includes('(d+)_chars') && value !== '') {\n        // The value value can have multiple entries (entries are separated by '@^')\n        // Example colsString&&number @^ colsString&&number\n        const entries = value.split('@^');\n        for (const entry of entries) {\n          if (entry && entry !== '') {\n            const [a, b] = entry.split('&&');\n            const updatedKey = key.replace('(d+)', b);\n            if (a !== '' && b !== '') {\n              minimizedValues.set(updatedKey, a.trim());\n            }\n          }\n        }\n      } else if (propDefn.name.startsWith('column_mask_hash') && value !== '') {\n        // The value value can have multiple entries (entries are separated by '#$')\n        // Example Cols&&Hash||Salt #$ Cols&&Hash||Salt\n        const entries = value.split('#$');\n        for (const entry of entries) {\n          if (entry && entry !== '') {\n            const [cols, trailing] = entry.split('&&');\n            if (trailing) {\n              const [hash, salt] = trailing.split('||');\n              if (cols !== '' && hash !== '' && salt && salt !== '') {\n                const updatedKey = 'column.mask.hash.([^.]+).with.salt.(.+)'\n                  .replace('([^.]+)', hash)\n                  .replace('(.+)', salt);\n                minimizedValues.set(updatedKey, cols);\n              }\n            }\n          }\n        }\n        // Include non-mandatory if no default, and not empty\n      } else if (value !== '') {\n        minimizedValues.set(key, value);\n      }\n    }\n  });\n\n  return minimizedValues;\n}\n\n/**\n * Alter the supplied connector properties for display purposes.\n * - Apply optional grid formatting values to some properties for better layouts.\n * - reset type if an alternate component is desired\n * @param propertyDefns the array of property definitions\n * @returns the array of altered property definitions\n */\nexport function getFormattedProperties(\n  propertyDefns: ConnectorProperty[],\n  connectorTypeId: string\n): ConnectorProperty[] {\n  const formattedPropertyDefns: ConnectorProperty[] = [...propertyDefns];\n\n  if (connectorTypeId === ConnectorTypeId.POSTGRES) {\n    for (const propDefn of formattedPropertyDefns) {\n      propDefn.gridWidthSm = 12;\n      const propName = propDefn.name.replace(/&/g, '.'); // Ensure dotted version of name\n      switch (propName) {\n        case PropertyName.BINARY_HANDLING_MODE:\n        case PropertyName.DECIMAL_HANDLING_MODE:\n        case PropertyName.HSTORE_HANDLING_MODE:\n        case PropertyName.INTERVAL_HANDLING_MODE:\n        case PropertyName.TIME_PRECISION_MODE:\n        case PropertyName.EVENT_PROCESSING_FAILURE_HANDLING_MODE:\n        case PropertyName.PLUGIN_NAME:\n        case PropertyName.PUBLICATION_AUTOCREATE_MODE:\n        case PropertyName.SCHEMA_REFRESH_MODE:\n          propDefn.gridWidthLg = 4;\n          break;\n        case PropertyName.DATA_SHAPE:\n        case PropertyName.DATA_SHAPE_KEY:\n        case PropertyName.DATA_SHAPE_VALUE:\n          propDefn.gridWidthLg = 6;\n          break;\n        case PropertyName.SLOT_MAX_RETRIES:\n          propDefn.gridWidthLg = 6;\n          propDefn.type = 'NON-NEG-INT';\n          break;\n        case PropertyName.DATABASE_HOSTNAME:\n          propDefn.gridWidthLg = 8;\n          break;\n        case PropertyName.SNAPSHOT_MODE:\n          propDefn.gridWidthLg = 9;\n          break;\n        case PropertyName.DATABASE_TCPKEEPALIVE:\n        case PropertyName.SLOT_DROP_ON_STOP:\n        case PropertyName.TOMBSTONES_ON_DELETE:\n        case PropertyName.PROVIDE_TRANSACTION_METADATA:\n        case PropertyName.SANITIZE_FIELD_NAMES:\n        case PropertyName.INCLUDE_UNKNOWN_DATATYPES:\n          propDefn.gridWidthLg = 12;\n          propDefn.type = 'BOOLEAN-SWITCH';\n          break;\n        case PropertyName.SNAPSHOT_DELAY_MS:\n        case PropertyName.SNAPSHOT_LOCK_TIMEOUT_MS:\n        case PropertyName.RETRIABLE_RESTART_CONNECTOR_WAIT_MS:\n        case PropertyName.HEARTBEAT_INTERVAL_MS:\n        case PropertyName.POLL_INTERVAL_MS:\n          propDefn.gridWidthLg = 4;\n          propDefn.type = 'DURATION';\n          propDefn.displayName = propDefn.displayName\n            .replace('(ms)', '')\n            .replace('(milli-seconds)', '')\n            .replace('(milliseconds)', '');\n          break;\n        case PropertyName.SLOT_RETRY_DELAY_MS:\n        case PropertyName.STATUS_UPDATE_INTERVAL_MS:\n        case PropertyName.XMIN_FETCH_INTERVAL_MS:\n          propDefn.gridWidthLg = 6;\n          propDefn.type = 'DURATION';\n          propDefn.displayName = propDefn.displayName.replace('(ms)', '');\n          break;\n        case PropertyName.DATABASE_PORT:\n        case PropertyName.SNAPSHOT_FETCH_SIZE:\n          propDefn.gridWidthLg = 4;\n          propDefn.type = 'NON-NEG-INT';\n          break;\n        case PropertyName.MAX_QUEUE_SIZE:\n        case PropertyName.MAX_BATCH_SIZE:\n          propDefn.gridWidthLg = 4;\n          propDefn.type = 'POS-INT';\n          break;\n        case PropertyName.COLUMN_TRUNCATE:\n        case PropertyName.COLUMN_MASK:\n          propDefn.gridWidthLg = 12;\n          propDefn.type = 'COL_MASK_OR_TRUNCATE';\n          break;\n        case PropertyName.COLUMN_MASK_HASH_SALT:\n          propDefn.gridWidthLg = 12;\n          propDefn.type = 'COL_MASK_HASH_SALT';\n          break;\n        default:\n          propDefn.gridWidthLg = 12;\n          break;\n      }\n    }\n  } else if (connectorTypeId === ConnectorTypeId.MONGO) {\n    for (const propDefn of formattedPropertyDefns) {\n      propDefn.gridWidthSm = 12;\n      const propName = propDefn.name.replace(/&/g, '.'); // Ensure dotted version of name\n      switch (propName) {\n        case PropertyName.MONGODB_MEMBERS_AUTO_DISCOVER:\n        case PropertyName.TOMBSTONES_ON_DELETE:\n        case PropertyName.PROVIDE_TRANSACTION_METADATA:\n        case PropertyName.SANITIZE_FIELD_NAMES:\n          propDefn.gridWidthLg = 12;\n          propDefn.type = 'BOOLEAN-SWITCH';\n          break;\n        case PropertyName.EVENT_PROCESSING_FAILURE_HANDLING_MODE:\n          propDefn.gridWidthLg = 4;\n          break;\n        case PropertyName.SNAPSHOT_MODE:\n          propDefn.gridWidthLg = 9;\n          break;\n        case PropertyName.DATA_SHAPE:\n        case PropertyName.DATA_SHAPE_KEY:\n        case PropertyName.DATA_SHAPE_VALUE:\n          propDefn.gridWidthLg = 6;\n          break;\n        case PropertyName.MONGODB_POLL_INTERVAL_MS:\n        case PropertyName.MONGODB_CONNECT_TIMEOUT_MS:\n        case PropertyName.CONNECT_BACKOFF_INITIAL_DELAY_MS:\n        case PropertyName.CONNECT_BACKOFF_MAX_DELAY_MS:\n        case PropertyName.MONGODB_SERVER_SELECTION_TIMEOUT_MS:\n        case PropertyName.MONGODB_SOCKET_TIMEOUT_MS:\n        case PropertyName.SNAPSHOT_DELAY_MS:\n        case PropertyName.RETRIABLE_RESTART_CONNECTOR_WAIT_MS:\n        case PropertyName.HEARTBEAT_INTERVAL_MS:\n        case PropertyName.POLL_INTERVAL_MS:\n          propDefn.gridWidthLg = 4;\n          propDefn.type = 'DURATION';\n          propDefn.displayName = propDefn.displayName\n            .replace('(ms)', '')\n            .replace('(milli-seconds)', '')\n            .replace('(milliseconds)', '')\n            .replace(' MS', '');\n          break;\n        case PropertyName.SNAPSHOT_FETCH_SIZE:\n          propDefn.gridWidthLg = 4;\n          propDefn.type = 'NON-NEG-INT';\n          break;\n        case PropertyName.QUERY_FETCH_SIZE:\n          propDefn.gridWidthLg = 9;\n          propDefn.type = 'NON-NEG-INT';\n          break;\n        case PropertyName.MAX_QUEUE_SIZE:\n        case PropertyName.MAX_BATCH_SIZE:\n          propDefn.gridWidthLg = 4;\n          propDefn.type = 'POS-INT';\n          break;\n        case PropertyName.CONNECT_MAX_ATTEMPTS:\n          propDefn.gridWidthLg = 9;\n          propDefn.type = 'POS-INT';\n          break;\n        default:\n          propDefn.gridWidthLg = 12;\n          break;\n      }\n    }\n  } else if (connectorTypeId === ConnectorTypeId.MYSQL) {\n    for (const propDefn of formattedPropertyDefns) {\n      if (propDefn) {\n        propDefn.gridWidthSm = 12;\n        const propName = propDefn.name.replace(/&/g, '.'); // Ensure dotted version of name\n        switch (propName) {\n          case PropertyName.EVENT_DESERIALIZATION_FAILURE_HANDLING_MODE:\n          case PropertyName.DECIMAL_HANDLING_MODE:\n          case PropertyName.TIME_PRECISION_MODE:\n          case PropertyName.BIGINT_UNSIGNED_HANDLING_MODE:\n          case PropertyName.EVENT_PROCESSING_FAILURE_HANDLING_MODE:\n          case PropertyName.BINLOG_BUFFER_SIZE:\n          case PropertyName.DATABASE_HISTORY_KAFKA_RECOVERY_ATTEMPTS:\n          case PropertyName.SNAPSHOT_MODE:\n          case PropertyName.SNAPSHOT_LOCKING_MODE:\n          case PropertyName.SNAPSHOT_NEW_TABLES:\n            propDefn.gridWidthLg = 4;\n            break;\n          case PropertyName.DATABASE_SERVER_ID_OFFSET:\n          case PropertyName.GTID_SOURCE_INCLUDES:\n          case PropertyName.GTID_SOURCE_EXCLUDES:\n          case PropertyName.DATA_SHAPE:\n          case PropertyName.DATA_SHAPE_KEY:\n          case PropertyName.DATA_SHAPE_VALUE:\n            propDefn.gridWidthLg = 6;\n            break;\n          case PropertyName.DATABASE_HOSTNAME:\n          case PropertyName.INCONSISTENT_SCHEMA_HANDLING_MODE:\n            propDefn.gridWidthLg = 8;\n            break;\n          case PropertyName.CONNECT_KEEP_ALIVE:\n          case PropertyName.ENABLE_TIME_ADJUSTER:\n          case PropertyName.GTID_SOURCE_FILTER_DML_EVENTS:\n          case PropertyName.INCLUDE_SCHEMA_CHANGES:\n          case PropertyName.TOMBSTONES_ON_DELETE:\n          case PropertyName.INCLUDE_QUERY:\n            propDefn.gridWidthLg = 12;\n            propDefn.type = 'BOOLEAN-SWITCH';\n            propDefn.displayName = propDefn.displayName.replace(\n              '(true/false)',\n              ''\n            );\n            break;\n          case PropertyName.CONNECT_TIMEOUT_MS:\n          case PropertyName.CONNECT_KEEP_ALIVE_INTERVAL_MS:\n            propDefn.gridWidthLg = 6;\n            propDefn.type = 'DURATION';\n            propDefn.displayName = propDefn.displayName.replace('(ms)', '');\n            break;\n          case PropertyName.SNAPSHOT_DELAY_MS:\n          case PropertyName.HEARTBEAT_INTERVAL_MS:\n          case PropertyName.POLL_INTERVAL_MS:\n          case PropertyName.DATABASE_HISTORY_KAFKA_RECOVERY_POLL_INTERVAL_MS:\n            propDefn.gridWidthLg = 4;\n            propDefn.type = 'DURATION';\n            propDefn.displayName = propDefn.displayName\n              .replace('(ms)', '')\n              .replace('(milli-seconds)', '')\n              .replace('(milliseconds)', '');\n            break;\n          case PropertyName.DATABASE_PORT:\n          case PropertyName.SNAPSHOT_FETCH_SIZE:\n            propDefn.gridWidthLg = 4;\n            propDefn.type = 'NON-NEG-INT';\n            break;\n          case PropertyName.MAX_QUEUE_SIZE:\n          case PropertyName.MAX_BATCH_SIZE:\n            propDefn.gridWidthLg = 4;\n            propDefn.type = 'POS-INT';\n            break;\n          case PropertyName.COLUMN_TRUNCATE:\n          case PropertyName.COLUMN_MASK:\n            propDefn.gridWidthLg = 12;\n            propDefn.type = 'COL_MASK_OR_TRUNCATE';\n            break;\n          case PropertyName.COLUMN_MASK_HASH_SALT:\n            propDefn.gridWidthLg = 12;\n            propDefn.type = 'COL_MASK_HASH_SALT';\n            break;\n          default:\n            propDefn.gridWidthLg = 12;\n            break;\n        }\n      }\n    }\n  } else if (connectorTypeId === ConnectorTypeId.SQLSERVER) {\n    for (const propDefn of formattedPropertyDefns) {\n      propDefn.gridWidthSm = 12;\n      const propName = propDefn.name.replace(/&/g, '.'); // Ensure dotted version of name\n      switch (propName) {\n        case PropertyName.BINARY_HANDLING_MODE:\n        case PropertyName.DECIMAL_HANDLING_MODE:\n        case PropertyName.TIME_PRECISION_MODE:\n        case PropertyName.EVENT_PROCESSING_FAILURE_HANDLING_MODE:\n        case PropertyName.SNAPSHOT_MODE:\n        case PropertyName.SNAPSHOT_ISOLATION_MODE:\n          propDefn.gridWidthLg = 4;\n          break;\n        case PropertyName.DATA_SHAPE:\n        case PropertyName.DATA_SHAPE_KEY:\n        case PropertyName.DATA_SHAPE_VALUE:\n          propDefn.gridWidthLg = 6;\n          break;\n        case PropertyName.QUERY_FETCH_SIZE:\n        case PropertyName.SNAPSHOT_MAX_THREADS:\n        case PropertyName.MAX_QUEUE_SIZE:\n        case PropertyName.MAX_BATCH_SIZE:\n          propDefn.gridWidthLg = 4;\n          propDefn.type = 'POS-INT';\n          break;\n        case PropertyName.SNAPSHOT_DELAY_MS:\n        case PropertyName.SNAPSHOT_LOCK_TIMEOUT_MS:\n        case PropertyName.HEARTBEAT_INTERVAL_MS:\n        case PropertyName.POLL_INTERVAL_MS:\n        case PropertyName.RETRIABLE_RESTART_CONNECTOR_WAIT_MS:\n          propDefn.gridWidthLg = 4;\n          propDefn.type = 'DURATION';\n          propDefn.displayName = propDefn.displayName\n            .replace('(ms)', '')\n            .replace('(milli-seconds)', '')\n            .replace('(milliseconds)', '');\n          break;\n        case PropertyName.DATABASE_PORT:\n        case PropertyName.SNAPSHOT_FETCH_SIZE:\n          propDefn.gridWidthLg = 4;\n          propDefn.type = 'NON-NEG-INT';\n          break;\n        case PropertyName.DATABASE_DBNAME:\n        case PropertyName.DATABASE_INSTANCE:\n          propDefn.gridWidthLg = 6;\n          break;\n        case PropertyName.DATABASE_HISTORY_KAFKA_RECOVERY_POLL_INTERVAL_MS:\n          propDefn.gridWidthLg = 6;\n          propDefn.type = 'DURATION';\n          propDefn.displayName = propDefn.displayName.replace('(ms)', '');\n          break;\n        case PropertyName.DATABASE_HISTORY_KAFKA_RECOVERY_ATTEMPTS:\n          propDefn.gridWidthLg = 6;\n          propDefn.type = 'POS-INT';\n          break;\n        case PropertyName.DATABASE_HOSTNAME:\n          propDefn.gridWidthLg = 8;\n          break;\n        case PropertyName.TOMBSTONES_ON_DELETE:\n        case PropertyName.PROVIDE_TRANSACTION_METADATA:\n        case PropertyName.SANITIZE_FIELD_NAMES:\n        case PropertyName.INCLUDE_SCHEMA_CHANGES:\n          propDefn.gridWidthLg = 12;\n          propDefn.type = 'BOOLEAN-SWITCH';\n          break;\n        case PropertyName.COLUMN_TRUNCATE:\n        case PropertyName.COLUMN_MASK:\n          propDefn.gridWidthLg = 12;\n          propDefn.type = 'COL_MASK_OR_TRUNCATE';\n          break;\n        case PropertyName.COLUMN_MASK_HASH_SALT:\n          propDefn.gridWidthLg = 12;\n          propDefn.type = 'COL_MASK_HASH_SALT';\n          break;\n        default:\n          propDefn.gridWidthLg = 12;\n          break;\n      }\n    }\n  }\n  return formattedPropertyDefns;\n}\n\n/**\n * Alter the supplied transform properties for display purposes.\n * - Apply optional grid formatting values to some properties for better layouts.\n * @param transformConfig the array of transform config\n * @returns the array of altered transform config\n */\nexport function getFormattedConfig(\n  transformConfig: any[],\n  transformTypeId: string\n): any {\n  const selectedTransformConfig: any = transformTypeId\n    ? _.find([...transformConfig], ['transform', transformTypeId])?.properties\n    : {};\n  const formattedTransformConfig: any[] = [];\n  // tslint:disable-next-line: forin\n  for (const transform in selectedTransformConfig) {\n    const transConfig = selectedTransformConfig[transform];\n    transConfig.gridWidthSm = 12;\n    transConfig.name = transConfig['x-name'];\n    transConfig.displayName = transConfig.title;\n    transConfig.allowedValues = transConfig?.enum;\n    const propName = transConfig.name.replace(/\\./g, '&'); // Ensure dotted version of name\n    transConfig.name = propName;\n    if (\n      transformTypeId === 'io.debezium.transforms.Filter' ||\n      transformTypeId === 'io.debezium.transforms.ContentBasedRouter'\n    ) {\n      switch (propName) {\n        case 'condition':\n          transConfig.gridWidthLg = 9;\n          break;\n        case 'language':\n          transConfig.gridWidthLg = 3;\n          break;\n        case 'null_handling_mode':\n          transConfig.gridWidthLg = 3;\n          break;\n        default:\n          transConfig.gridWidthLg = 12;\n          break;\n      }\n    } else if (\n      transformTypeId === 'io.debezium.transforms.ExtractNewRecordState'\n    ) {\n      switch (propName) {\n        case 'drop_tombstones':\n          transConfig.type = 'BOOLEAN-SWITCH';\n          break;\n        case 'delete_handling_mode':\n          transConfig.gridWidthLg = 4;\n          break;\n        case 'add_fields_prefix':\n          transConfig.gridWidthLg = 3;\n          break;\n        case 'add_fields':\n          transConfig.gridWidthLg = 9;\n          break;\n        case 'add_headers_prefix':\n          transConfig.gridWidthLg = 3;\n          break;\n        case 'add_headers':\n          transConfig.gridWidthLg = 9;\n          break;\n        default:\n          transConfig.gridWidthLg = 12;\n          break;\n      }\n    } else if (\n      transformTypeId === 'io.debezium.transforms.ByLogicalTableRouter'\n    ) {\n      switch (propName) {\n        case 'key_enforce​_uniqueness':\n          transConfig.type = 'BOOLEAN-SWITCH';\n          break;\n      }\n    }\n    formattedTransformConfig.push(transConfig);\n  }\n  return formattedTransformConfig;\n}\n\n/**\n * Alter the supplied topic creation properties for display purposes.  The property names are also shortened to remove common\n * prefixes (\"topic.creation.\", \"topic.creation.(.+).\")\n * - Apply optional grid formatting values to some properties for better layouts.\n * @param topicCreationConfig the array of topic create properties\n * @returns the array of altered topic creation properties\n */\nexport function getFormattedTopicCreationProperties(\n  topicCreationProperties: any[]\n): any {\n  // Topic Group forms deal with properties that have prefixes stripped off\n  topicCreationProperties.map(\n    (prop) =>\n      (prop.name = prop.name\n        .replace(PropertyName.TOPIC_CREATION_GROUP_PREFIX, '')\n        .replace(PropertyName.TOPIC_CREATION_PREFIX, ''))\n  );\n\n  const formattedTopicCreationProperties: ConnectorProperty[] = [\n    ...topicCreationProperties.filter(\n      (defn: any) =>\n        defn.name !==\n        PropertyName.TOPIC_CREATION_GROUPS.replace(\n          PropertyName.TOPIC_CREATION_PREFIX,\n          ''\n        )\n    ),\n  ];\n\n  for (const topicGroupProp of formattedTopicCreationProperties) {\n    topicGroupProp.gridWidthSm = 12;\n    const propName = topicGroupProp.name.replace(/&/g, '.'); // Ensure dotted version of name\n\n    switch (propName) {\n      case PropertyName.TOPIC_CREATION_DEFAULT_REPLICATION_FACTOR.replace(\n        PropertyName.TOPIC_CREATION_PREFIX,\n        ''\n      ):\n      case PropertyName.TOPIC_CREATION_DEFAULT_PARTITIONS.replace(\n        PropertyName.TOPIC_CREATION_PREFIX,\n        ''\n      ):\n        topicGroupProp.gridWidthLg = 6;\n        break;\n      case PropertyName.TOPIC_CREATION_DEFAULT_CLEANUP_POLICY.replace(\n        PropertyName.TOPIC_CREATION_PREFIX,\n        ''\n      ):\n      case PropertyName.TOPIC_CREATION_DEFAULT_COMPRESSION_TYPE.replace(\n        PropertyName.TOPIC_CREATION_PREFIX,\n        ''\n      ):\n        topicGroupProp.gridWidthLg = 6;\n        break;\n      case PropertyName.TOPIC_CREATION_GROUP_INCLUDE.replace(\n        PropertyName.TOPIC_CREATION_GROUP_PREFIX,\n        ''\n      ):\n      case PropertyName.TOPIC_CREATION_GROUP_EXCLUDE.replace(\n        PropertyName.TOPIC_CREATION_GROUP_PREFIX,\n        ''\n      ):\n        topicGroupProp.gridWidthLg = 12;\n        break;\n      default:\n        topicGroupProp.gridWidthLg = 12;\n        break;\n    }\n  }\n  return formattedTopicCreationProperties;\n}\n\n/**\n * Get a Filter configuration page content Obj, based on the\n * @param connectorType the connector type\n */\nexport function getFilterConfigurationPageContent(connectorType: string): any {\n  let returnObj;\n  if (connectorType === ConnectorTypeId.MONGO) {\n    returnObj = {\n      fieldArray: [\n        {\n          field: DatabaseFilter.NAME,\n          valueSample: DatabaseFilter.LABEL,\n          preview: true,\n          excludeFilter: false,\n        },\n        {\n          field: CollectionFilter.NAME,\n          valueSample: `${DatabaseFilter.LABEL}.${CollectionFilter.LABEL}`,\n          preview: true,\n          excludeFilter: false,\n        },\n        {\n          field: FieldFilter.NAME,\n          valueSample: `${DatabaseFilter.LABEL}.${CollectionFilter.LABEL}.${FieldFilter.LABEL}`,\n          preview: false,\n          excludeFilter: true,\n        },\n      ],\n    };\n  } else if (connectorType === ConnectorTypeId.MYSQL) {\n    returnObj = {\n      fieldArray: [\n        {\n          field: DatabaseFilter.NAME,\n          valueSample: DatabaseFilter.LABEL,\n          preview: true,\n          excludeFilter: false,\n        },\n        {\n          field: TableFilter.NAME,\n          valueSample: `${DatabaseFilter.LABEL}.${TableFilter.LABEL}`,\n          preview: true,\n          excludeFilter: false,\n        },\n        {\n          field: ColumnFilter.NAME,\n          valueSample: `${DatabaseFilter.LABEL}.${TableFilter.LABEL}.${ColumnFilter.LABEL}`,\n          preview: false,\n          excludeFilter: false,\n        },\n      ],\n    };\n  } else {\n    returnObj = {\n      fieldArray: [\n        {\n          field: SchemaFilter.NAME,\n          valueSample: SchemaFilter.LABEL,\n          preview: true,\n          excludeFilter: false,\n        },\n        {\n          field: TableFilter.NAME,\n          valueSample: `${SchemaFilter.LABEL}.${TableFilter.LABEL}`,\n          preview: true,\n          excludeFilter: false,\n        },\n        {\n          field: ColumnFilter.NAME,\n          valueSample: `${SchemaFilter.LABEL}.${TableFilter.LABEL}.${ColumnFilter.LABEL}`,\n          preview: false,\n          excludeFilter: false,\n        },\n      ],\n    };\n  }\n  return returnObj;\n}\n\nexport function mapToObject(inputMap: Map<string, string>): {\n  key: string;\n  value: any;\n} {\n  const obj = {} as { key: string; value: any };\n  inputMap.forEach((value, key) => {\n    obj[key] = value;\n  });\n  return obj;\n}\n\nexport function maskPropertyValues(inputObj: { key: string; value: any }) {\n  for (const [key, value] of Object.entries(inputObj)) {\n    if (key.includes('password') && !!inputObj[key]) {\n      inputObj[key] = '*'.repeat(value.length);\n    }\n  }\n  return inputObj;\n}\n\n/**\n * Wrapper function to call the underline api call repetitively upto MAX_RETRIES limit in case of error\n * @param api function fetching the api\n * @param serviceRef reference of service type on which to call the api function\n * @param postParam param for post API call of type Array containing element in same order as need to passed in funcion\n * @param retries no. of retries\n */\nexport function fetch_retry(\n  api: any,\n  serviceRef: any,\n  postParam?: any,\n  retries: number = 1\n): Promise<any> {\n  const apicall = api.bind(serviceRef);\n  // For Get method\n  if (postParam === undefined) {\n    return apicall().catch((err: any) => {\n      if (retries >= MAX_RETRIES) {\n        throw err;\n      }\n      return fetch_retry(api, serviceRef, ++retries);\n    });\n  }\n  // For Post method\n  else {\n    return apicall(...postParam).catch((err: any) => {\n      if (retries >= MAX_RETRIES) {\n        throw err;\n      }\n      return fetch_retry(api, serviceRef, postParam, ++retries);\n    });\n  }\n}\n","import {\n  Button,\n  Modal,\n  Split,\n  SplitItem,\n  Stack,\n  StackItem,\n  Text,\n  Title,\n} from '@patternfly/react-core';\nimport * as React from 'react';\n\n/**\n * Confirmation type enum that maps to patternfly modal type\n */\nexport enum ConfirmationType {\n  DANGER = 'danger',\n  WARNING = 'warning',\n  INFO = 'info',\n  SUCCESS = 'success',\n  DEFAULT = 'default',\n}\n\n/**\n * Button style enum that maps to patternfly button classes\n */\nexport enum ConfirmationButtonStyle {\n  NORMAL = 'primary',\n  SUCCESS = 'success',\n  DANGER = 'danger',\n  WARNING = 'warning',\n  INFO = 'info',\n  LINK = 'link',\n}\n\n/**\n * A dialog that can be used to obtain user confirmation when deleting an object.\n */\nexport interface IConfirmationDialogProps {\n  /**\n   * The style of button to use for the primary action\n   */\n  buttonStyle: ConfirmationButtonStyle;\n  /**\n   * The localized cancel button text.\n   */\n  i18nCancelButtonText: string;\n\n  /**\n   * The localized confirmation button text.\n   */\n  i18nConfirmButtonText: string;\n\n  /**\n   * The localized confirmation message.\n   */\n  i18nConfirmationMessage: string;\n\n  /**\n   * An optional localized message providing more details.\n   */\n  i18nDetailsMessage?: string;\n\n  /**\n   * The localized dialog title.\n   */\n  i18nTitle: string;\n\n  /**\n   * The confirmation type, or unset for default\n   */\n  type?: ConfirmationType;\n\n  /**\n   * A callback for when the cancel button is clicked. Caller should hide dialog.\n   */\n  onCancel: () => void;\n\n  /**\n   * A callback for when the confirmation button is clicked. Caller should hide dialog.\n   */\n  onConfirm: () => void;\n\n  /**\n   * Indicates if the dialog should be visible.\n   */\n  showDialog: boolean;\n}\n\n/**\n * A modal dialog to display for confirmation actions.\n */\nexport const ConfirmationDialog: React.FunctionComponent<\n  IConfirmationDialogProps\n> = ({\n  buttonStyle,\n  i18nCancelButtonText,\n  i18nConfirmButtonText,\n  i18nConfirmationMessage,\n  i18nDetailsMessage,\n  i18nTitle,\n  type,\n  onCancel,\n  onConfirm,\n  showDialog,\n}) => {\n  let buttonStyleMapped:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'danger'\n    | 'link'\n    | 'plain'\n    | 'control' = 'primary';\n  switch (buttonStyle) {\n    case 'danger':\n      buttonStyleMapped = 'danger';\n      break;\n    case 'info':\n      buttonStyleMapped = 'secondary';\n      break;\n    case 'link':\n      buttonStyleMapped = 'link';\n      break;\n    default:\n  }\n  return (\n    <Modal\n      title={i18nTitle}\n      data-testid=\"confirmation-dialog\"\n      aria-label={`${i18nTitle} confirmation`}\n      titleIconVariant={type}\n      isOpen={showDialog}\n      onClose={onCancel}\n      actions={[\n        <Button key=\"confirm\" variant={buttonStyleMapped} onClick={onConfirm}>\n          {i18nConfirmButtonText}\n        </Button>,\n        <Button key=\"cancel\" variant=\"link\" onClick={onCancel}>\n          {i18nCancelButtonText}\n        </Button>,\n      ]}\n      width={'50%'}\n    >\n      <Stack hasGutter={true}>\n        <StackItem>\n          <Split hasGutter={true}>\n            <SplitItem isFilled={true}>\n              <Title headingLevel=\"h4\" size={'lg'}>\n                {i18nConfirmationMessage}\n              </Title>\n            </SplitItem>\n          </Split>\n        </StackItem>\n        {i18nDetailsMessage && (\n          <StackItem>\n            <Text>{i18nDetailsMessage}</Text>\n          </StackItem>\n        )}\n      </Stack>\n    </Modal>\n  );\n};\n","import { PageNotFound } from 'components';\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\n/**\n * Use this component for any new section of routes (any config object that has a \"routes\" property\n */\nexport function RenderRoutes({ routes }: any) {\n  return (\n    <Switch>\n      {routes.map((route: any, i: number) => {\n        return <RouteWithSubRoutes key={route.key} {...route} />;\n      })}\n      <Route component={PageNotFound} />\n    </Switch>\n  );\n}\n\n/**\n * Render a route with potential sub routes\n */\nfunction RouteWithSubRoutes(route: any) {\n  return (\n    <Route\n      path={route.path}\n      exact={route.exact}\n      render={(props) => <route.component {...props} routes={route.routes} />}\n    />\n  );\n}\n","import { ConnectorsPage, CreateConnectorPage } from '../pages';\nimport { RenderRoutes } from './RenderRoutes';\n\nexport const ROUTES = [\n  // Login page can be added here in future\n  { path: '/', key: 'ROOT', exact: true, component: ConnectorsPage },\n  {\n    path: '/',\n    key: 'APP',\n    component: RenderRoutes,\n    routes: [\n      {\n        path: '/',\n        key: 'APP_ROOT',\n        exact: true,\n        component: ConnectorsPage,\n      },\n      {\n        path: '/create-connector',\n        key: 'CREATE_CONNECTOR_PAGE',\n        exact: true,\n        component: CreateConnectorPage,\n      },\n    ],\n  },\n];\n","import './WithErrorBoundary.css';\nimport {\n  PageSection,\n  PageSectionVariants,\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  Title,\n  EmptyStateBody,\n  Button,\n  EmptyStateSecondaryActions,\n} from '@patternfly/react-core';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport { useTranslation } from 'react-i18next';\n\nconst ErrorFallback: React.FunctionComponent<{\n  error: Error;\n  resetErrorBoundary: any;\n}> = ({ error, resetErrorBoundary }) => {\n  const { t } = useTranslation();\n\n  const [showErrorInfo, setShowErrorInfo] = React.useState(false);\n\n  const openJiraIssue = (url: string) => {\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer');\n    if (newWindow) {\n      newWindow.opener = null;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <PageSection className=\"ps_error\" variant={PageSectionVariants.light}>\n        <div className=\"application-error-page\">\n          <EmptyState variant={EmptyStateVariant.large}>\n            <EmptyStateIcon icon={ExclamationTriangleIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n              {t('applicationErrorTitle')}\n            </Title>\n            <EmptyStateBody>{t('applicationErrorMsg')}</EmptyStateBody>\n            <Button variant=\"primary\" onClick={resetErrorBoundary}>\n              {t('tryAgain')}\n            </Button>\n            <EmptyStateSecondaryActions>\n              <Button\n                variant=\"link\"\n                data-testid=\"error-btn-artifacts\"\n                // isDisabled={true}\n                onClick={() =>\n                  openJiraIssue('https://issues.redhat.com/browse/DBZ')\n                }\n              >\n                {t('reportIssue')}\n              </Button>\n              <Button\n                variant=\"link\"\n                data-testid=\"error-btn-details\"\n                // tslint:disable-next-line: jsx-no-lambda\n                onClick={() => setShowErrorInfo(!showErrorInfo)}\n              >\n                {showErrorInfo ? t('hideDetails') : t('showDetails')}\n              </Button>\n            </EmptyStateSecondaryActions>\n          </EmptyState>\n          <div className=\"separator\">&nbsp;</div>\n          {showErrorInfo ? (\n            <div\n              className=\"application-error-page_details pf-c-empty-state pf-m-lg\"\n              id=\"ace-wrapper\"\n            >\n              <pre>{error.message}</pre>\n            </div>\n          ) : (\n            <div />\n          )}\n        </div>\n      </PageSection>\n    </React.Fragment>\n  );\n};\n\nexport const WithErrorBoundary: React.FunctionComponent = ({ children }) => (\n  <ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[Date.now()]}>\n    {children}\n  </ErrorBoundary>\n);\n","import './app.css';\nimport i18n from 'i18n';\nimport { AppLayout } from 'layout';\nimport React from 'react';\nimport { I18nextProvider, useTranslation } from 'react-i18next';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport {\n  ConfirmationButtonStyle,\n  ConfirmationDialog,\n  RenderRoutes,\n  ROUTES,\n  WithErrorBoundary,\n} from 'shared';\n\nconst App: React.FC = () => {\n  const [confirm, setConfirm] = React.useState(false);\n  const [confirmCallback, setConfirmCallback] = React.useState(null);\n  const getConfirmation = (message: any, callback: any) => {\n    if (message === 'Code navigation') {\n      callback(true);\n    } else {\n      setConfirmCallback(() => callback);\n      setConfirm(true);\n    }\n  };\n  return (\n    <Router basename=\"/#app\" getUserConfirmation={getConfirmation}>\n      <I18nextProvider i18n={i18n}>\n        <AppLayout>\n          <React.Suspense fallback={null}>\n            <WithErrorBoundary>\n              <RenderRoutes routes={ROUTES} />\n              {confirm && (\n                <UserConfirm\n                  confirmCallback={confirmCallback}\n                  setConfirm={setConfirm}\n                />\n              )}\n            </WithErrorBoundary>\n          </React.Suspense>\n        </AppLayout>\n      </I18nextProvider>\n    </Router>\n  );\n};\nexport default App;\n\nconst UserConfirm = (props: any) => {\n  const { t } = useTranslation();\n\n  function allowTransition() {\n    props.setConfirm(false);\n    props.confirmCallback(true);\n  }\n\n  function blockTransition() {\n    props.setConfirm(false);\n    props.confirmCallback(false);\n  }\n\n  return (\n    <ConfirmationDialog\n      buttonStyle={ConfirmationButtonStyle.NORMAL}\n      i18nCancelButtonText={t('stay')}\n      i18nConfirmButtonText={t('leave')}\n      i18nConfirmationMessage={t('cancelWarningMsg')}\n      i18nTitle={t('exitWizard')}\n      showDialog={true}\n      onCancel={blockTransition}\n      onConfirm={allowTransition}\n    />\n  );\n};\n","import App from './app/app';\nimport './app/app.css';\nimport '@patternfly/patternfly/patternfly.css';\nimport '@patternfly/patternfly/utilities/Accessibility/accessibility.css';\nimport '@patternfly/patternfly/utilities/BackgroundColor/BackgroundColor.css';\nimport '@patternfly/patternfly/utilities/Display/display.css';\nimport '@patternfly/patternfly/utilities/Flex/flex.css';\nimport '@patternfly/patternfly/utilities/Sizing/sizing.css';\nimport '@patternfly/patternfly/utilities/Spacing/spacing.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement);\n"],"names":["KafkaConnectCluster","props","connectClusters","setConnectClusters","globalsService","Services","getConnectCluster","then","cClusters","catch","err","alert","className","Form","options","fieldId","propertyChange","value","event","index","indexOf","handleChange","getInvalidFilterMsg","filter","errorMsg","returnVal","forEach","val","key","includes","getFieldExpression","data","fieldExclude","get","filterValues","fieldExcludeList","filterField","setFilterField","formDataCopy","Map","formData","set","delete","setFormData","FormGroup","label","i18nFilterExcludeFieldLabel","labelIcon","Popover","bodyContent","i18nFilterFieldInfoMsg","href","target","onClick","e","preventDefault","noVerticalAlign","helperTextInvalid","invalidMsg","size","fieldName","helperTextInvalidIcon","validated","Flex","FlexItem","TextInput","type","id","name","onChange","placeholder","fieldPlaceholder","fieldInclude","FilterInputFieldComponent","FIELD_EXCLUDE","FIELD_INCLUDE","fieldIncludeList","has","fieldSelected","setFieldSelected","handleParentToggle","isSelected","currentTarget","i18nFilterFieldLabel","helperText","Text","component","i18nFilterFieldHelperText","ToggleGroup","ToggleGroupItem","buttonId","text","i18nInclude","isDisabled","i18nExclude","isExpanded","setIsExpanded","ExpandableSection","toggleText","i18nHideFilter","i18nShowFilter","onToggle","isExpandedVal","children","FormDisabledComponent","isRequired","HelpInfoIcon","description","isOpen","setOpen","handleItemValueChange","columns","hash","salt","newValue","maskHashSaltItemChanged","rowId","handleKeyPress","keyEvent","Grid","GridItem","span","hashValue","saltValue","columnsValue","onKeyPress","spacer","default","Select","variant","open","onSelect","selection","isPlaceholder","hashVal","selections","map","option","SelectOption","canDelete","Tooltip","position","content","i18nRemoveDefinitionTooltip","deleteMaskHashSaltItem","field","getItemRows","split","handleMaskHashSaltItemChanged","maskHashSaltValue","rows","join","setFieldValue","handleDeleteMaskHashSaltItem","rowIndex","splice","getHashValue","trailing","getSaltValue","saltVal","InputGroup","Stack","hasGutter","row","idx","StackItem","length","i18nAddDefinitionTooltip","Button","i18nAddDefinitionText","n","maskTruncateItemChanged","nValue","min","deleteMaskTruncateItem","handleMaskTruncateItemChanged","maskTruncateValue","handleDeleteMaskTruncateItem","getColumnsValue","getNValue","FormTextComponent","initialValues","property","replace","message","clearValidation","FormComponent","t","useTranslation","getValidate","propertyDefinition","isViewMode","isMandatory","displayName","allowedValues","FormSelectComponent","FormCheckboxComponent","isChecked","defaultValue","FormSwitchComponent","FormDurationComponent","undefined","FormInputComponent","infoTitle","infoText","clearValidationError","selected","setSelected","AppLayoutContext","AppLayout","breadcrumb","setHasBreadcrumb","clusterId","setClusterId","Provider","showBreadcrumb","b","Page","header","AppHeader","handleClusterChange","PageSection","logoComponent","to","Brand","src","alt","headerTools","PageHeaderTools","PageHeader","logo","ConnectorState","ConnectorTypeId","DatabaseFilter","SchemaFilter","TableFilter","CollectionFilter","ColumnFilter","FieldFilter","PropertyName","PropertyCategory","getConnectorTypeDescription","connType","MYSQL","POSTGRES","SQLSERVER","MONGO","getBasicPropertyDefinitions","propertyDefns","isMCS","connProperties","propDefn","category","BASIC","push","connNameProperty","CONNECTOR_NAME","gridWidthLg","gridWidthSm","formatPropertyDefinitions","propertyValues","getAdvancedPropertyDefinitions","ADVANCED_GENERAL","ADVANCED_PUBLICATION","ADVANCED_REPLICATION","ADVANCED_SSL","getDataOptionsPropertyDefinitions","DATA_OPTIONS_GENERAL","DATA_OPTIONS_ADVANCED","DATA_OPTIONS_SNAPSHOT","getRuntimeOptionsPropertyDefinitions","RUNTIME_OPTIONS_ENGINE","RUNTIME_OPTIONS_HEARTBEAT","isDataOptions","propertyCategory","isRuntimeOptions","minimizePropertyValues","minimizedValues","find","prop","entries","entry","a","updatedKey","trim","startsWith","cols","getFormattedProperties","connectorTypeId","formattedPropertyDefns","BINARY_HANDLING_MODE","DECIMAL_HANDLING_MODE","HSTORE_HANDLING_MODE","INTERVAL_HANDLING_MODE","TIME_PRECISION_MODE","EVENT_PROCESSING_FAILURE_HANDLING_MODE","PLUGIN_NAME","PUBLICATION_AUTOCREATE_MODE","SCHEMA_REFRESH_MODE","DATA_SHAPE","DATA_SHAPE_KEY","DATA_SHAPE_VALUE","SLOT_MAX_RETRIES","DATABASE_HOSTNAME","SNAPSHOT_MODE","DATABASE_TCPKEEPALIVE","SLOT_DROP_ON_STOP","TOMBSTONES_ON_DELETE","PROVIDE_TRANSACTION_METADATA","SANITIZE_FIELD_NAMES","INCLUDE_UNKNOWN_DATATYPES","SNAPSHOT_DELAY_MS","SNAPSHOT_LOCK_TIMEOUT_MS","RETRIABLE_RESTART_CONNECTOR_WAIT_MS","HEARTBEAT_INTERVAL_MS","POLL_INTERVAL_MS","SLOT_RETRY_DELAY_MS","STATUS_UPDATE_INTERVAL_MS","XMIN_FETCH_INTERVAL_MS","DATABASE_PORT","SNAPSHOT_FETCH_SIZE","MAX_QUEUE_SIZE","MAX_BATCH_SIZE","COLUMN_TRUNCATE","COLUMN_MASK","COLUMN_MASK_HASH_SALT","MONGODB_MEMBERS_AUTO_DISCOVER","MONGODB_POLL_INTERVAL_MS","MONGODB_CONNECT_TIMEOUT_MS","CONNECT_BACKOFF_INITIAL_DELAY_MS","CONNECT_BACKOFF_MAX_DELAY_MS","MONGODB_SERVER_SELECTION_TIMEOUT_MS","MONGODB_SOCKET_TIMEOUT_MS","QUERY_FETCH_SIZE","CONNECT_MAX_ATTEMPTS","EVENT_DESERIALIZATION_FAILURE_HANDLING_MODE","BIGINT_UNSIGNED_HANDLING_MODE","BINLOG_BUFFER_SIZE","DATABASE_HISTORY_KAFKA_RECOVERY_ATTEMPTS","SNAPSHOT_LOCKING_MODE","SNAPSHOT_NEW_TABLES","DATABASE_SERVER_ID_OFFSET","GTID_SOURCE_INCLUDES","GTID_SOURCE_EXCLUDES","INCONSISTENT_SCHEMA_HANDLING_MODE","CONNECT_KEEP_ALIVE","ENABLE_TIME_ADJUSTER","GTID_SOURCE_FILTER_DML_EVENTS","INCLUDE_SCHEMA_CHANGES","INCLUDE_QUERY","CONNECT_TIMEOUT_MS","CONNECT_KEEP_ALIVE_INTERVAL_MS","DATABASE_HISTORY_KAFKA_RECOVERY_POLL_INTERVAL_MS","SNAPSHOT_ISOLATION_MODE","SNAPSHOT_MAX_THREADS","DATABASE_DBNAME","DATABASE_INSTANCE","getFormattedConfig","transformConfig","transformTypeId","selectedTransformConfig","properties","formattedTransformConfig","transform","transConfig","title","enum","propName","getFormattedTopicCreationProperties","topicCreationProperties","TOPIC_CREATION_GROUP_PREFIX","TOPIC_CREATION_PREFIX","formattedTopicCreationProperties","defn","TOPIC_CREATION_GROUPS","topicGroupProp","TOPIC_CREATION_DEFAULT_REPLICATION_FACTOR","TOPIC_CREATION_DEFAULT_PARTITIONS","TOPIC_CREATION_DEFAULT_CLEANUP_POLICY","TOPIC_CREATION_DEFAULT_COMPRESSION_TYPE","TOPIC_CREATION_GROUP_INCLUDE","TOPIC_CREATION_GROUP_EXCLUDE","getFilterConfigurationPageContent","connectorType","fieldArray","NAME","valueSample","LABEL","preview","excludeFilter","mapToObject","inputMap","obj","maskPropertyValues","inputObj","Object","repeat","fetch_retry","api","serviceRef","postParam","retries","apicall","bind","ConfirmationType","ConfirmationButtonStyle","ConfirmationDialog","buttonStyle","i18nCancelButtonText","i18nConfirmButtonText","i18nConfirmationMessage","i18nDetailsMessage","i18nTitle","onCancel","onConfirm","showDialog","buttonStyleMapped","Modal","titleIconVariant","onClose","actions","width","Split","SplitItem","isFilled","Title","headingLevel","RenderRoutes","routes","Switch","route","i","RouteWithSubRoutes","Route","path","exact","render","ROUTES","ErrorFallback","error","resetErrorBoundary","showErrorInfo","setShowErrorInfo","EmptyState","EmptyStateIcon","icon","EmptyStateBody","EmptyStateSecondaryActions","url","newWindow","window","opener","ErrorBoundary","FallbackComponent","resetKeys","Date","now","confirm","setConfirm","confirmCallback","setConfirmCallback","basename","getUserConfirmation","callback","I18nextProvider","i18n","fallback","UserConfirm","document","getElementById"],"sourceRoot":""}