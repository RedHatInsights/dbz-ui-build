{"version":3,"file":"449.fd46c6ba.js","mappings":"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","sources":["webpack://@debezium/ui/../services/src/baseService.ts","webpack://@debezium/ui/../services/src/connector/connector.service.ts","webpack://@debezium/ui/../services/src/config/config.service.ts","webpack://@debezium/ui/../services/src/logger/logger.service.ts","webpack://@debezium/ui/../services/src/globals/globals.service.ts","webpack://@debezium/ui/../services/src/services.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {LoggerService} from \"./logger\";\nimport {ConfigService} from \"./config\";\nimport axios, { AxiosRequestConfig } from 'axios';\nimport {ContentTypes} from \"@debezium/ui-models\";\n\n/**\n * Interface implemented by all services.\n */\nexport interface Service {\n    init(): void;\n}\n\n\n/**\n * Base class for all services.\n */\nexport abstract class BaseService implements Service {\n\n    protected logger: LoggerService | null = null;\n    protected config: ConfigService | null = null;\n\n    private apiBaseHref: string;\n\n    public init(): void {\n        this.apiBaseHref = this.config?.artifactsUrl() || '';\n        if (this.apiBaseHref.endsWith(\"/\")) {\n            this.apiBaseHref = this.apiBaseHref.substring(0, this.apiBaseHref.length - 1);\n        }\n        this.logger?.debug(\"[BaseService] Base HREF of REST API: \", this.apiBaseHref);\n    }\n\n    /**\n     * Creates an endpoint to use when making a REST call.  Supports path params and query params.\n     * @param path\n     * @param params\n     * @param queryParams\n     */\n    protected endpoint(path: string, params?: any, queryParams?: any): string {\n        if (params) {\n            Object.keys(params).forEach(key => {\n                const value: string = encodeURIComponent(params[key]);\n                path = path.replace(\":\" + key, value);\n            });\n        }\n        let rval: string = this.apiBaseHref + path;\n        if (queryParams) {\n            let first: boolean = true;\n            for (const key in queryParams) {\n                if (queryParams[key]) {\n                    const value: string = encodeURIComponent(queryParams[key]);\n                    if (first) {\n                        rval = rval + \"?\" + key;\n                    } else {\n                        rval = rval + \"&\" + key;\n                    }\n                    if (value !== null && value !== undefined) {\n                        rval = rval + \"=\" + value;\n                    }\n                    first = false;\n                }\n            }\n        }\n        this.logger?.info(\"[BaseService] Using REST endpoint: \", rval);\n        return rval;\n    }\n\n    /**\n     * Creates the request options used by the HTTP service when making API calls.\n     * @param headers\n     */\n    protected options(headers: {[header: string]: string}): AxiosRequestConfig {\n        const options: AxiosRequestConfig = {headers};\n        return options;\n    }\n\n    /**\n     * Performs an HTTP GET operation to the given URL with the given options.  Returns\n     * a Promise to the HTTP response data.\n     */\n    protected httpGet<T>(url: string, options?: AxiosRequestConfig, successCallback?: (value: any) => T): Promise<T> {\n        this.logger?.info(\"[BaseService] Making a GET request to: \", url);\n\n        if (!options) {\n            options = this.options({ \"Accept\": ContentTypes.APPLICATION_JSON });\n        }\n\n        const config: AxiosRequestConfig = this.axiosConfig(\"get\", url, options);\n        return axios.request(config)\n            .then(response => {\n                const data: T = response.data;\n                if (successCallback) {\n                    return successCallback(data);\n                } else {\n                    return data;\n                }\n            }).catch(error => {\n                return Promise.reject(this.unwrapErrorData(error));\n            });\n    }\n\n    /**\n     * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n     * a Promise to null (no response data expected).\n     * @param url\n     * @param body\n     * @param options\n     */\n    protected httpPost<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void): Promise<void> {\n        this.logger?.info(\"[BaseService] Making a POST request to: \", url);\n\n        if (!options) {\n            options = this.options({ \"Content-Type\": ContentTypes.APPLICATION_JSON });\n        }\n\n        const config: AxiosRequestConfig = this.axiosConfig(\"post\", url, options, body);\n        return axios.request(config)\n            .then(() => {\n                if (successCallback) {\n                    return successCallback();\n                } else {\n                    return;\n                }\n            }).catch(error => {\n                return Promise.reject(this.unwrapErrorData(error));\n            });\n    }\n\n    /**\n     * Performs an HTTP POST operation to the given URL with the given body and options.  Returns\n     * a Promise to the HTTP response data.\n     * @param url\n     * @param body\n     * @param options\n     */\n    protected httpPostWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: any) => O): Promise<O> {\n        this.logger?.info(\"[BaseService] Making a POST request to: \", url);\n\n        if (!options) {\n            options = this.options({ \"Accept\": ContentTypes.APPLICATION_JSON, \"Content-Type\": ContentTypes.APPLICATION_JSON });\n        }\n\n        const config: AxiosRequestConfig = this.axiosConfig(\"post\", url, options, body);\n        return axios.request(config)\n            .then(response => {\n                const data: O = response.data;\n                if (successCallback) {\n                    return successCallback(data);\n                } else {\n                    return data;\n                }\n            }).catch(error => {\n                return Promise.reject(this.unwrapErrorData(error));\n            });\n    }\n\n    /**\n     * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n     * a Promise to null (no response data expected).\n     * @param url\n     * @param body\n     * @param options\n     */\n    protected httpPut<I>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: () => void): Promise<void> {\n        this.logger?.info(\"[BaseService] Making a PUT request to: \", url);\n\n        if (!options) {\n            options = this.options({ \"Content-Type\": ContentTypes.APPLICATION_JSON });\n        }\n\n        const config: AxiosRequestConfig = this.axiosConfig(\"put\", url, options, body);\n        return axios.request(config)\n            .then(() => {\n                if (successCallback) {\n                    return successCallback();\n                } else {\n                    return;\n                }\n            }).catch(error => {\n                return Promise.reject(this.unwrapErrorData(error));\n            });\n    }\n\n    /**\n     * Performs an HTTP PUT operation to the given URL with the given body and options.  Returns\n     * a Promise to the HTTP response data.\n     * @param url\n     * @param body\n     * @param options\n     */\n    protected httpPutWithReturn<I, O>(url: string, body: I, options?: AxiosRequestConfig, successCallback?: (data: O) => O): Promise<O> {\n        this.logger?.info(\"[BaseService] Making a PUT request to: \", url);\n\n        if (!options) {\n            options = this.options({ \"Accept\": ContentTypes.APPLICATION_JSON, \"Content-Type\": ContentTypes.APPLICATION_JSON });\n        }\n\n        const config: AxiosRequestConfig = this.axiosConfig(\"put\", url, options, body);\n        return axios.request(config)\n            .then(response => {\n                const data: O = response.data;\n                if (successCallback) {\n                    return successCallback(data);\n                } else {\n                    return data;\n                }\n            }).catch(error => {\n                return Promise.reject(this.unwrapErrorData(error));\n            });\n    }\n\n    /**\n     * Performs an HTTP DELETE operation to the given URL with the given body and options.\n     * @param url\n     * @param options\n     */\n    protected httpDelete<T>(url: string, options?: AxiosRequestConfig, successCallback?: () => T): Promise<T | null> {\n        this.logger?.info(\"[BaseService] Making a DELETE request to: \", url);\n\n        if (!options) {\n            options = {};\n        }\n\n        const config: AxiosRequestConfig = this.axiosConfig(\"delete\", url, options);\n        return axios.request(config)\n            .then(() => {\n                return successCallback ? successCallback() : null;\n            }).catch(error => {\n                return Promise.reject(this.unwrapErrorData(error));\n            });\n    }\n\n    private axiosConfig(method: string, url: string, options: any, data?: any): AxiosRequestConfig {\n        return {...{\n                data,\n                method,\n                url,\n                validateStatus: (status) => {\n                    return status >= 200 && status < 300;\n                }\n            }, ...options};\n    }\n\n    private unwrapErrorData(error: any): any {\n        if (error.response && error.response.data) {\n            return error.response.data;\n        }\n        return error;\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ConnectionValidationResult, Connector, ConnectorType, FilterValidationResult, PropertiesValidationResult } from \"@debezium/ui-models\";\nimport { BaseService } from \"../baseService\";\n\n/**\n * The connector service.  Used to fetch connectors and other connector operations.\n */\nexport class ConnectorService extends BaseService {\n\n    /**\n     * Get the details of connector for supplied connection type\n     * Example usage:\n     * \n     * const connectorService = Services.getConnectorService();\n     * connectorService.getConnectorInfo('postgres')\n     *  .then((cDetails: ConnectorType) => {\n     *      alert(cDetails);\n     *  })\n     * .catch((err: Error) => {\n     *      alert(err);\n     *  });\n     */\n    public getConnectorInfo(connectorTypeId: string): Promise<ConnectorType> {\n        this.logger?.info(\"[ConnectorService] Getting the details of Connector:\", connectorTypeId);\n        const endpoint: string = this.endpoint(\"/connector-types/:connectorTypeId\", { connectorTypeId });\n        return this.httpGet<ConnectorType>(endpoint);\n    }\n\n    /**\n     * Validate the connection properties for the supplied connection type\n     * Example usage:\n     * \n     * const connectorService = Services.getConnectorService();\n     * const body = { \"oneParm: oneValue\", \"twoParam: twoValue\"}\n     * connectorService.validateConnection('postgres', body)\n     *  .then((result: ConnectionValidationResult) => {\n     *    if (result.status === 'INVALID') {\n     *      alert('status is INVALID');\n     *    } else {\n     *      alert('status is VALID');\n     *    }\n     *  });\n     */\n    public validateConnection(connectorTypeId: string, body: any): Promise<ConnectionValidationResult> {\n        this.logger?.info(\"[ConnectorService] Validating connection:\", connectorTypeId);\n\n        const endpoint: string = this.endpoint(\"/connector-types/:connectorTypeId/validation/connection\", { connectorTypeId });\n        return this.httpPostWithReturn(endpoint, body);\n    }\n\n    /**\n     * Validate the filters for the supplied connection type\n     * Example usage:\n     * \n     * const connectorService = Services.getConnectorService();\n     * const body = { \"oneParm: oneValue\", \"twoParam: twoValue\"}\n     * connectorService.validateFilters('postgres', body)\n     *  .then((result: FilterValidationResult) => {\n     *    if (result.status === 'INVALID') {\n     *      alert('status is INVALID');\n     *    } else {\n     *      alert('status is VALID');\n     *    }\n     *  });\n     */\n    public validateFilters(connectorTypeId: string, body: any): Promise<FilterValidationResult> {\n        this.logger?.info(\"[ConnectorService] Validating filters:\", connectorTypeId);\n\n        const endpoint: string = this.endpoint(\"/connector-types/:connectorTypeId/validation/filters\", { connectorTypeId });\n        return this.httpPostWithReturn(endpoint, body);\n    }\n\n    /**\n     * Validate the properties for the supplied connection type\n     * Example usage:\n     * \n     * const connectorService = Services.getConnectorService();\n     * const body = { \"oneParm: oneValue\", \"twoParam: twoValue\"}\n     * connectorService.validateProperties('postgres', body)\n     *  .then((result: PropertiesValidationResult) => {\n     *    if (result.status === 'INVALID') {\n     *      alert('status is INVALID');\n     *    } else {\n     *      alert('status is VALID');\n     *    }\n     *  });\n     */\n    public validateProperties(connectorTypeId: string, body: any): Promise<PropertiesValidationResult> {\n        this.logger?.info(\"[ConnectorService] Validating properties:\", connectorTypeId);\n\n        const endpoint: string = this.endpoint(\"/connector-types/:connectorTypeId/validation/properties\", { connectorTypeId });\n        return this.httpPostWithReturn(endpoint, body);\n    }\n\n    /**\n     * Create Connector using the supplied ConnectorConfiguration\n     * Example usage:\n     * \n     * const connectorService = Services.getConnectorService();\n     * const configMap = new Map<string,string>();\n     * configMap.set(\"oneParam\",\"oneValue\");\n     * configMap.set(\"twoParam\",\"twoValue\");\n     * const config = new ConnectorConfiguration(\"connName\", configMap);\n     * connectorService.createConnector(config)\n     *  .then((result: CreateConnectorResult) => {\n     *  });\n     */\n    public createConnector(clusterId: number, connectorTypeId: string, body: any): Promise<void> {\n        this.logger?.info(\"[ConnectorService] Creating a connector:\");\n\n        const endpoint: string = this.endpoint(\"/connector/:clusterId/:connectorTypeId\", { clusterId, connectorTypeId });\n        return this.httpPostWithReturn(endpoint, body);\n    }\n\n    /**\n     * Get the available connectors for the supplied clusterId\n     */\n    public getConnectors(clusterId: number): Promise<Connector[]> {\n        this.logger?.info(\"[ConnectorService] Getting the list of connectors.\");\n\n        const endpoint: string = this.endpoint(\"/connectors/:clusterId\", { clusterId });\n        return this.httpGet<Connector[]>(endpoint);\n    }\n\n    /**\n     * Delete the Connector for the supplied clusterId\n     */\n    public deleteConnector(clusterId: number, connectorName: string): Promise<Connector[]> {\n        this.logger?.info(\"[ConnectorService] Delete the connector\");\n\n        const endpoint: string = this.endpoint(\"/connectors/:clusterId/:connectorName\", { clusterId, connectorName });\n        return this.httpDelete<any>(endpoint);\n    }\n\n    /**\n     * Pause the Connector for the supplied clusterId\n     */\n    public pauseConnector(clusterId: number, connectorName: string, body: any): Promise<void> {\n        this.logger?.info(\"[ConnectorService] Pause the connector\");\n\n        const endpoint: string = this.endpoint(\"/connector/:clusterId/:connectorName/pause\", { clusterId, connectorName });\n        return this.httpPut(endpoint, body);\n    }\n    \n    /**\n     * Resume the Connector for the supplied clusterId\n     */\n    public resumeConnector(clusterId: number, connectorName: string, body: any): Promise<void> {\n        this.logger?.info(\"[ConnectorService] Resume the connector\");\n\n        const endpoint: string = this.endpoint(\"/connector/:clusterId/:connectorName/resume\", { clusterId, connectorName });\n        return this.httpPut(endpoint, body);\n    }\n    \n    /**\n     * Restart the Connector for the supplied clusterId\n     */\n    public restartConnector(clusterId: number, connectorName: string, body: any): Promise<void> {\n        this.logger?.info(\"[ConnectorService] Restart the connector\");\n\n        const endpoint: string = this.endpoint(\"/connector/:clusterId/:connectorName/restart\", { clusterId, connectorName });\n        return this.httpPost(endpoint, body);\n    }    \n\n    /**\n     * Restart the Connector Task for the supplied clusterId and connector\n     */\n    public restartConnectorTask(clusterId: number, connectorName: string, connectorTaskId: number, body: any): Promise<void> {\n        this.logger?.info(\"[ConnectorService] Restart the connector task\");\n\n        const endpoint: string = this.endpoint(\"/connector/:clusterId/:connectorName/task/:connectorTaskId/restart\", \n                                                { clusterId, connectorName, connectorTaskId });\n        return this.httpPost(endpoint, body);\n    }    \n\n    /**\n     * Get the transform list and their properties for supplied clusterId\n     */\n       public getTransform(clusterId: number): Promise<any[]> {\n        this.logger?.info(\"[ConnectorService] Getting the list of transform.\");\n\n        const endpoint: string = this.endpoint(\"/:clusterId/transforms.json\", { clusterId });\n        return this.httpGet<Connector[]>(endpoint);\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Service } from \"../baseService\";\nimport { ConfigType, FeaturesConfig } from './config.type';\nimport _ from 'lodash'\n\n/**\n * A simple configuration service.  Reads information from a global \"DebeziumUiConfig\" variable\n * that is typically included via JSONP.\n */\nexport class ConfigService implements Service {\n    private config: ConfigType = {\n        artifacts: {\n            type: \"rest\",\n            url: \"http://localhost:8080/api/\"\n        },\n        \"deployment.mode\": \"\",\n        features: {\n            readOnly: false\n        },\n        mode: \"dev\",\n        ui: {\n            contextPath: '',\n            url: \"http://localhost:8888/\"\n        }\n    };\n\n    constructor() {\n        const w: any = window;\n\n        if (w.UI_CONFIG?.mode === \"prod\") {\n            this.config = _.extend({}, this.config, w.UI_CONFIG, {\n              artifacts: {\n                type: \"rest\",\n                url: `${__webpack_public_path__}/api`,\n              },\n            });\n            console.info(\"[ConfigService] Applied UI_CONFIG:\");\n            console.info(w.UI_CONFIG);\n          }\n    }\n\n    public init(): void {\n        // Nothing to init (done in c'tor)\n    }\n\n    public artifactsType(): string | null {\n        if (!this.config.artifacts) {\n            return null;\n        }\n        return this.config.artifacts.type;\n    }\n\n    public artifactsUrl(): string | null {\n        if (!this.config.artifacts) {\n            return null;\n        }\n        return this.config.artifacts.url;\n    }\n\n    public deploymentMode(): string {\n        return this.config['deployment.mode'];\n    }\n\n    public uiUrl(): string {\n        if (!this.config.ui || !this.config.ui.url) {\n            return \"\";\n        }\n        return this.config.ui.url;\n    }\n\n    public uiContextPath(): string|undefined {\n        if (!this.config.ui || !this.config.ui.contextPath) {\n            return undefined;\n        }\n        return this.config.ui.contextPath;\n    }\n\n    public features(): FeaturesConfig {\n        if (!this.config.features) {\n            return {};\n        }\n        return this.config.features;\n    }\n\n    public featureReadOnly(): boolean {\n        if (!this.config.features || !this.config.features.readOnly) {\n            return false;\n        }\n        return this.config.features.readOnly;\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {Service} from \"../baseService\";\n\n/**\n * A simple logger service.\n */\nexport class LoggerService implements Service {\n\n    public init(): void {\n        // Nothing to init\n    }\n\n    public debug(message?: any, ...optionalParams: any[]): void {\n        console.debug(message, ...optionalParams);\n    }\n\n    public info(message?: any, ...optionalParams: any[]): void {\n        console.info(message, ...optionalParams);\n    }\n\n    public warn(message?: any, ...optionalParams: any[]): void {\n        console.warn(message, ...optionalParams);\n    }\n\n    public error(message?: any, ...optionalParams: any[]): void {\n        console.error(message, ...optionalParams);\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ConnectorType} from \"@debezium/ui-models\";\nimport {BaseService} from \"../baseService\";\n\n\n/**\n * The globals service.  Used to get global/settings information from the back-end.\n */\nexport class GlobalsService extends BaseService {\n\n    public getConnectorTypes(): Promise<ConnectorType[]> {\n        this.logger?.info(\"[GlobalsService] Getting the list of connector types.\");\n        const endpoint: string = this.endpoint(\"/connector-types\");\n        return this.httpGet<ConnectorType[]>(endpoint);\n    }\n\n    public getConnectCluster(): Promise<string[]> {\n        this.logger?.info(\"[GlobalsService] Getting the list of connector cluster.\");\n        const endpoint: string = this.endpoint(\"/connect-clusters\");\n        return this.httpGet<string[]>(endpoint);\n    }\n\n    /**\n     * Get the enabled state for topic creation for the supplied clusterId\n     */\n    public getTopicCreationEnabled(clusterId: number): Promise<boolean> {\n        this.logger?.info(\"[GlobalsService] Getting the enabled state for topic creation.\");\n\n        const endpoint: string = this.endpoint(\"/:clusterId/topic-creation-enabled\", { clusterId });\n        return this.httpGet<boolean>(endpoint);\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {ConnectorService} from \"./connector\";\nimport {ConfigService} from \"./config\";\nimport {GlobalsService} from \"./globals\";\nimport {LoggerService} from \"./logger\";\nimport {Service} from \"./baseService\";\n\n/**\n * Class that provides access to all of the services in the application.\n */\nexport class Services {\n\n    public static getConnectorService(): ConnectorService {\n        return Services.all.connector;\n    }\n\n    public static getConfigService(): ConfigService {\n        return Services.all.config;\n    }\n\n    public static getGlobalsService(): GlobalsService {\n        return Services.all.globals;\n    }\n\n    public static getLoggerService(): LoggerService {\n        return Services.all.logger;\n    }\n\n    private static all: any = {\n        config: new ConfigService(),\n        connector: new ConnectorService(),\n        globals: new GlobalsService(),\n        logger: new LoggerService()\n    };\n\n    // tslint:disable-next-line:member-ordering member-access\n    static _intialize(): void {\n        // First perform simple service-service injection.\n        Object.keys(Services.all).forEach( svcToInjectIntoName => {\n            const svcToInjectInto: any = Services.all[svcToInjectIntoName];\n            Object.keys(Services.all).filter(key => key !== svcToInjectIntoName).forEach(injectableSvcKey => {\n                if (svcToInjectInto[injectableSvcKey] !== undefined && svcToInjectInto[injectableSvcKey] === null) {\n                    svcToInjectInto[injectableSvcKey] = Services.all[injectableSvcKey];\n                }\n            })\n        });\n        // Once that's done, init() all the services\n        Object.keys(Services.all).forEach( svcToInjectIntoName => {\n            const svcToInit: Service = Services.all[svcToInjectIntoName];\n            svcToInit.init();\n        });\n    }\n\n}\nServices._intialize();\n"],"names":["logger","config","init","this","apiBaseHref","artifactsUrl","endsWith","substring","length","debug","endpoint","path","params","queryParams","Object","keys","forEach","key","value","encodeURIComponent","replace","rval","first","info","options","headers","httpGet","url","successCallback","ContentTypes","axiosConfig","then","response","data","catch","error","Promise","reject","unwrapErrorData","httpPost","body","httpPostWithReturn","httpPut","httpPutWithReturn","httpDelete","method","validateStatus","status","getConnectorInfo","connectorTypeId","validateConnection","validateFilters","validateProperties","createConnector","clusterId","getConnectors","deleteConnector","connectorName","pauseConnector","resumeConnector","restartConnector","restartConnectorTask","connectorTaskId","getTransform","BaseService","artifacts","type","features","readOnly","mode","ui","contextPath","w","window","UI_CONFIG","console","artifactsType","deploymentMode","uiUrl","uiContextPath","featureReadOnly","message","optionalParams","warn","getConnectorTypes","getConnectCluster","getTopicCreationEnabled","getConnectorService","Services","all","connector","getConfigService","getGlobalsService","globals","getLoggerService","_intialize","svcToInjectIntoName","svcToInjectInto","filter","injectableSvcKey","undefined","ConfigService","ConnectorService","GlobalsService","LoggerService"],"sourceRoot":""}